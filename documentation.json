{
    "pipes": [],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-0bc1fd1833e9c50352f2296b39e78c99",
            "file": "src/app/components/dashboard/products/store/app-state.ts",
            "type": "interface",
            "sourceCode": "export interface AppState {}",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        },
        {
            "name": "AppState",
            "id": "interface-AppState-dfa22cd0e483f680c16a9fe307ca8d55-1",
            "file": "src/app/components/dashboard/products/store/products.reducer.ts",
            "type": "interface",
            "sourceCode": "import * as productActions from './product.action';\nimport { Product } from './product.model';\nimport * as fromRoot from './app-state';\nimport { createFeatureSelector, createSelector } from '@ngrx/store';\n\nexport interface ProductState {\n  products: Product[];\n  loading: boolean;\n  loaded: boolean;\n  error: string;\n  productId: number;\n  selectedProduct: object;\n}\n\nexport interface AppState extends fromRoot.AppState {\n  products: ProductState;\n}\n\nexport const initialState: ProductState = {\n  products: [],\n  loading: false,\n  loaded: false,\n  error: ' ',\n  productId: null,\n  selectedProduct: null,\n};\n\nexport function productReducer(\n  state = initialState,\n  action: productActions.ProductAction\n): ProductState {\n  switch (action.type) {\n    case productActions.ProductActionTypes.LOAD_PRODUCTS: {\n      return {\n        ...state,\n        loading: true,\n      };\n    }\n\n    case productActions.ProductActionTypes.LOAD_PRODUCTS_SUCCESS: {\n      return {\n        ...state,\n        loading: false,\n        loaded: true,\n        products: action.payload,\n      };\n    }\n\n    case productActions.ProductActionTypes.LOAD_PRODUCTS_FAIL: {\n      return {\n        ...state,\n        products: [],\n        loaded: false,\n        loading: false,\n        error: action.payload,\n      };\n    }\n\n    case productActions.ProductActionTypes.CREATE_PRODUCT: {\n      return {\n      ...state,\n      loading: true,\n      };\n    }\n\n    case productActions.ProductActionTypes.CREATE_PRODUCT_SUCCESS: {\n      return {\n        ...state,\n        loading: false,\n        loaded: true,\n        products: [...state.products, action.payload],\n      };\n    }\n\n    case productActions.ProductActionTypes.CREATE_PRODUCT_FAIL: {\n      return {\n      ...state,\n        loaded: false,\n        loading: false,\n        error: action.payload,\n      };\n    }\n\n  case productActions.ProductActionTypes.LOAD_PRODUCT: {\n      return {\n        ...state,\n        loading: true,\n        productId: action.payload,\n      };\n    }\n\n    case productActions.ProductActionTypes.LOAD_PRODUCT_SUCCESS: {\n      return {\n        ...state,\n        loading: false,\n        loaded: true,\n        selectedProduct: action.payload,\n      };\n    }\n\n    case productActions.ProductActionTypes.LOAD_PRODUCT_FAIL: {\n      return {\n        ...state,\n        products: [],\n        loaded: false,\n        loading: false,\n        error: action.payload,\n      };\n    }\n\n\t\tcase productActions.ProductActionTypes.UPDATE_PRODUCT: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: true,\n        selectedProduct: action.payload,\n      };\n\t\t}\n\t\tcase productActions.ProductActionTypes.UPDATE_PRODUCT_SUCCESS: {\n\t\t\tlet newProducts = [...state.products];\n\t\t\tnewProducts = newProducts.map((item) => {\n\t\t\t\tif (action.payload.id === item.id) {\n\t\t\t\t\treturn action.payload;\n\t\t\t\t}\n\t\t\t\treturn item;\n\t\t\t});\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: false,\n\t\t\t\tloaded: true,\n\t\t\t\tproducts: newProducts,\n\t\t\t};\n\t\t}\n\n\t\tcase productActions.ProductActionTypes.UPDATE_PRODUCT_FAIL: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tproducts: [],\n\t\t\t\tloaded: false,\n\t\t\t\tloading: false,\n\t\t\t\terror: action.payload,\n\t\t\t};\n\t\t}\n\n\t\tcase productActions.ProductActionTypes.DELETE_PRODUCT: {\n\t\t\treturn{\n\t\t\t\t...state,\n\t\t\t\tloading: true,\n\t\t\t\tproductId: action.payload,\n\t\t\t}\n\t\t}\n\n    case productActions.ProductActionTypes.DELETE_PRODUCT_SUCCESS: {\n      let newProducts = [...state.products];\n      newProducts = newProducts.filter((item) => {\n        if (action.payload !== item.id) {\n          return action.payload;\n        }\n      });\n      return{\n        ...state,\n        loading: false,\n        loaded: true,\n        products: newProducts\n      }\n    }\n\n    case productActions.ProductActionTypes.DELETE_PRODUCT_FAIL: {\n      return {\n        ...state,\n        products: [],\n        loaded: false,\n        loading: false,\n        error: action.payload,\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n\nconst getProductFeatureState = createFeatureSelector<ProductState>('product');\n\nexport const getProducts = createSelector(\n  getProductFeatureState,\n  (state: ProductState) => state.products\n);\nexport const getError = createSelector(\n  getProductFeatureState,\n  (state: ProductState) => state.error\n);\nexport const getProductById = createSelector(\n  getProductFeatureState,\n  (state: ProductState) => state.selectedProduct\n);\n",
            "properties": [
                {
                    "name": "products",
                    "type": "ProductState",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "AppState-1"
        },
        {
            "name": "Product",
            "id": "interface-Product-1841c4fc6d6f92fd9267b00695f77677",
            "file": "src/app/components/dashboard/products/store/product.model.ts",
            "type": "interface",
            "sourceCode": "export interface Product {\n    id?: number;\n    heading: string;\n    description: string;\n    imageUrl: string;\n  }",
            "properties": [
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "heading",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "imageUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ProductState",
            "id": "interface-ProductState-dfa22cd0e483f680c16a9fe307ca8d55",
            "file": "src/app/components/dashboard/products/store/products.reducer.ts",
            "type": "interface",
            "sourceCode": "import * as productActions from './product.action';\nimport { Product } from './product.model';\nimport * as fromRoot from './app-state';\nimport { createFeatureSelector, createSelector } from '@ngrx/store';\n\nexport interface ProductState {\n  products: Product[];\n  loading: boolean;\n  loaded: boolean;\n  error: string;\n  productId: number;\n  selectedProduct: object;\n}\n\nexport interface AppState extends fromRoot.AppState {\n  products: ProductState;\n}\n\nexport const initialState: ProductState = {\n  products: [],\n  loading: false,\n  loaded: false,\n  error: ' ',\n  productId: null,\n  selectedProduct: null,\n};\n\nexport function productReducer(\n  state = initialState,\n  action: productActions.ProductAction\n): ProductState {\n  switch (action.type) {\n    case productActions.ProductActionTypes.LOAD_PRODUCTS: {\n      return {\n        ...state,\n        loading: true,\n      };\n    }\n\n    case productActions.ProductActionTypes.LOAD_PRODUCTS_SUCCESS: {\n      return {\n        ...state,\n        loading: false,\n        loaded: true,\n        products: action.payload,\n      };\n    }\n\n    case productActions.ProductActionTypes.LOAD_PRODUCTS_FAIL: {\n      return {\n        ...state,\n        products: [],\n        loaded: false,\n        loading: false,\n        error: action.payload,\n      };\n    }\n\n    case productActions.ProductActionTypes.CREATE_PRODUCT: {\n      return {\n      ...state,\n      loading: true,\n      };\n    }\n\n    case productActions.ProductActionTypes.CREATE_PRODUCT_SUCCESS: {\n      return {\n        ...state,\n        loading: false,\n        loaded: true,\n        products: [...state.products, action.payload],\n      };\n    }\n\n    case productActions.ProductActionTypes.CREATE_PRODUCT_FAIL: {\n      return {\n      ...state,\n        loaded: false,\n        loading: false,\n        error: action.payload,\n      };\n    }\n\n  case productActions.ProductActionTypes.LOAD_PRODUCT: {\n      return {\n        ...state,\n        loading: true,\n        productId: action.payload,\n      };\n    }\n\n    case productActions.ProductActionTypes.LOAD_PRODUCT_SUCCESS: {\n      return {\n        ...state,\n        loading: false,\n        loaded: true,\n        selectedProduct: action.payload,\n      };\n    }\n\n    case productActions.ProductActionTypes.LOAD_PRODUCT_FAIL: {\n      return {\n        ...state,\n        products: [],\n        loaded: false,\n        loading: false,\n        error: action.payload,\n      };\n    }\n\n\t\tcase productActions.ProductActionTypes.UPDATE_PRODUCT: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: true,\n        selectedProduct: action.payload,\n      };\n\t\t}\n\t\tcase productActions.ProductActionTypes.UPDATE_PRODUCT_SUCCESS: {\n\t\t\tlet newProducts = [...state.products];\n\t\t\tnewProducts = newProducts.map((item) => {\n\t\t\t\tif (action.payload.id === item.id) {\n\t\t\t\t\treturn action.payload;\n\t\t\t\t}\n\t\t\t\treturn item;\n\t\t\t});\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: false,\n\t\t\t\tloaded: true,\n\t\t\t\tproducts: newProducts,\n\t\t\t};\n\t\t}\n\n\t\tcase productActions.ProductActionTypes.UPDATE_PRODUCT_FAIL: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tproducts: [],\n\t\t\t\tloaded: false,\n\t\t\t\tloading: false,\n\t\t\t\terror: action.payload,\n\t\t\t};\n\t\t}\n\n\t\tcase productActions.ProductActionTypes.DELETE_PRODUCT: {\n\t\t\treturn{\n\t\t\t\t...state,\n\t\t\t\tloading: true,\n\t\t\t\tproductId: action.payload,\n\t\t\t}\n\t\t}\n\n    case productActions.ProductActionTypes.DELETE_PRODUCT_SUCCESS: {\n      let newProducts = [...state.products];\n      newProducts = newProducts.filter((item) => {\n        if (action.payload !== item.id) {\n          return action.payload;\n        }\n      });\n      return{\n        ...state,\n        loading: false,\n        loaded: true,\n        products: newProducts\n      }\n    }\n\n    case productActions.ProductActionTypes.DELETE_PRODUCT_FAIL: {\n      return {\n        ...state,\n        products: [],\n        loaded: false,\n        loading: false,\n        error: action.payload,\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n\nconst getProductFeatureState = createFeatureSelector<ProductState>('product');\n\nexport const getProducts = createSelector(\n  getProductFeatureState,\n  (state: ProductState) => state.products\n);\nexport const getError = createSelector(\n  getProductFeatureState,\n  (state: ProductState) => state.error\n);\nexport const getProductById = createSelector(\n  getProductFeatureState,\n  (state: ProductState) => state.selectedProduct\n);\n",
            "properties": [
                {
                    "name": "error",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "loaded",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "loading",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "productId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "products",
                    "type": "Product[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "selectedProduct",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-687db6f781858364894695d373a433e3",
            "file": "src/app/components/store/modal.ts",
            "type": "interface",
            "sourceCode": "export interface State {\n    addProductFormView: boolean;\n    editProductFormView: boolean;\n  }\n",
            "properties": [
                {
                    "name": "addProductFormView",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "editProductFormView",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Theme",
            "id": "interface-Theme-57c4486e2db69c4d5a0c27cc55b48c53",
            "file": "src/app/theme/theme.ts",
            "type": "interface",
            "sourceCode": "export interface Theme {\n  name: string;\n  properties: any;\n}\n\nexport const light: Theme = {\n  name: 'light',\n  properties: {\n    '--foreground-default': '#3d4852',\n    '--foreground-secondary': '#41474D',\n    '--foreground-tertiary': '#797C80',\n    '--foreground-quaternary': '#F4FAFF',\n    '--foreground-light': '#41474D',\n\n    '--background-default': '#F4FAFF',\n    '--background-secondary': '#A3B9CC',\n    '--background-tertiary': '#aaadaf',\n    '--background-light': '#FFFFFF',\n\n    '--primary-default': '#5DFDCB',\n    '--primary-dark': '#24B286',\n    '--primary-light': '#f5fbf9',\n\n    '--error-default': '#EF3E36',\n    '--error-dark': '#800600',\n    '--error-light': '#FFCECC',\n\n    '--background-tertiary-shadow': '0 1px 3px 0 rgba(92, 125, 153, 0.5)',\n  },\n};\n\nexport const dark: Theme = {\n  name: 'dark',\n  properties: {\n    '--foreground-default': '#5C7D99',\n    '--foreground-secondary': '#A3B9CC',\n    '--foreground-tertiary': '#F4FAFF',\n    '--foreground-quaternary': '#E5E5E5',\n    '--foreground-light': '#FFFFFF',\n\n    '--background-default': '#797C80',\n    '--background-secondary': '#41474D',\n    '--background-tertiary': '#1c5069',\n    '--background-light': '#41474D',\n\n    '--primary-default': '#5DFDCB',\n    '--primary-dark': '#24B286',\n    '--primary-light': '#f3efef',\n\n    '--error-default': '#EF3E36',\n    '--error-dark': '#800600',\n    '--error-light': '#FFCECC',\n\n    '--background-tertiary-shadow': '0 1px 3px 0 rgba(8, 9, 10, 0.5)',\n  },\n};\n",
            "properties": [
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "properties",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-4f94ca17d4fe9502f493903126ac3e23",
            "file": "src/app/user.ts",
            "type": "interface",
            "sourceCode": "export  interface  User {\n  email: string;\n  password: string;\n}\n",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-3cd2a060b6095eb4ef5cfe4b02adf0a5-1",
            "file": "src/app/model/user.model.ts",
            "type": "interface",
            "sourceCode": "export interface User {\n  email: string;\n  password: string;\n}\n",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "User-1"
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-831334c8a21da0f4d4b5f81aa2c54ff6",
            "file": "src/app/auth.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "isLoggedIn",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "userData",
                            "type": "User"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "userData",
                            "type": "User",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signIn",
                    "args": [
                        {
                            "name": "userData",
                            "type": "User"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "userData",
                            "type": "User",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { User } from './user';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  constructor() {}\n\n  public signIn(userData: User): void {\n    localStorage.setItem('ACCESS_TOKEN', 'access_token');\n  }\n\n  public register(userData: User): void {\n    localStorage.setItem('ACCESS_TOKEN', 'access_token');\n  }\n  // tslint:disable-next-line: typedef\n  public isLoggedIn() {\n    return localStorage.getItem('ACCESS_TOKEN') !== null;\n  }\n  public logout(): void {\n    localStorage.removeItem('ACCESS_TOKEN');\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 7
            },
            "type": "injectable"
        },
        {
            "name": "HttpService",
            "id": "injectable-HttpService-b985b98f7bd74d39b77a191cce4208f8",
            "file": "src/app/services/http.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "deleteSecured",
                    "args": [
                        {
                            "name": "url",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHeader",
                    "args": [],
                    "optional": false,
                    "returnType": "{ headers: any; }",
                    "typeParameters": [],
                    "line": 11
                },
                {
                    "name": "getSecured",
                    "args": [
                        {
                            "name": "url",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patchSecured",
                    "args": [
                        {
                            "name": "url",
                            "type": ""
                        },
                        {
                            "name": "payload",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "payload",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "postLogin",
                    "args": [
                        {
                            "name": "url",
                            "type": ""
                        },
                        {
                            "name": "payload",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "payload",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "postSecured",
                    "args": [
                        {
                            "name": "url",
                            "type": ""
                        },
                        {
                            "name": "payload",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "payload",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpService {\n\n  constructor(private httpClient: HttpClient) { }\n  // tslint:disable-next-line: typedef\n  getHeader() {\n    const json = sessionStorage.getItem('token');\n    if (json) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${json}`\n      });\n      return { headers };\n\n    }\n    return { headers: null };\n  }\n\n  getSecured(url): Observable<any> {\n    return this.httpClient.get(url);\n  }\n\n  postSecured(url, payload): Observable<any> {\n    return this.httpClient.post(url, payload, this.getHeader());\n  }\n\n  deleteSecured(url): Observable<any> {\n    return this.httpClient.delete(url, this.getHeader());\n  }\n\n  // tslint:disable-next-line: typedef\n  patchSecured(url, payload) {\n    return this.httpClient.patch(url, payload, this.getHeader());\n  }\n\n  postLogin(url, payload): Observable<any> {\n    return this.httpClient.post(url, payload);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LocalService",
            "id": "injectable-LocalService-94d8f96c19db4ee3bd2fd3b5250e0fa9",
            "file": "src/app/services/local.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getCurrencyText",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLocalText",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport i18next from 'i18next';\nimport * as localization from '../../assets/localization-en.json';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocalService {\n\n  constructor(){\n    i18next.init(\n      {\n        lng: 'en',\n        debug: true,\n        resources: {\n          en: {\n            translation: localization,\n          },\n        },\n      },\n      (err, t) => {\n        // initialized and ready to go!\n        // document.getElementById('output').innerHTML = i18next.t('key');\n      }\n    );\n  }\n\n  // tslint:disable-next-line: typedef\n  getLocalText(key?: string) {\n    return key !== undefined ? i18next.t(key) : '';\n  }\n\n  getCurrencyText(value): string {\n    return '$' + value;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        },
        {
            "name": "ProductEffect",
            "id": "injectable-ProductEffect-b82379abb3e74e1d01b3d2dc22a4ba27",
            "file": "src/app/components/dashboard/products/store/product.effects.ts",
            "properties": [
                {
                    "name": "createProducts$",
                    "defaultValue": "this.actions$.pipe(\n    ofType<productActions.CreateProduct>(\n        productActions.ProductActionTypes.CREATE_PRODUCT\n    ),\n    mergeMap((action: productActions.CreateProduct) =>\n      this.httpService.postSecured(environment.addProducts,action.payload).pipe(\n        switchMap(\n          (newproduct: Product) =>[\n            new productActions.CreateProductSuccess(newproduct)\n        ]\n        ),\n        catchError(err => of(new productActions.CreateProductFail(err)))\n      )\n    )\n  )",
                    "type": "Observable<Action>",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "deleteProduct$",
                    "defaultValue": "this.actions$.pipe(\n    ofType<productActions.DeleteProduct>(\n        productActions.ProductActionTypes.DELETE_PRODUCT\n    ),\n    mergeMap((action: productActions.DeleteProduct) =>\n      this.httpService.deleteSecured(environment.deleteProducts.replace('{id}', action.payload.toString())).pipe(\n        map(\n          () =>\n            new productActions.DeleteProductSuccess(action.payload)\n        ),\n        catchError(err => of(new productActions.DeleteProductFail(err)))\n      )\n    )\n  )",
                    "type": "Observable<Action>",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "loadProduct$",
                    "defaultValue": "this.actions$.pipe(\n    ofType<productActions.LoadProduct>(\n        productActions.ProductActionTypes.LOAD_PRODUCT\n    ),\n    mergeMap((action: productActions.LoadProduct) =>\n      this.httpService.getSecured(environment.getProductsById.replace('{id}', action.payload.toString())).pipe(\n        map(\n          (products: Product) =>\n            new productActions.LoadProductSuccess(products)\n        ),\n        catchError(err => of(new productActions.LoadProductFail(err)))\n      )\n    )\n  )",
                    "type": "Observable<Action>",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "loadProducts$",
                    "defaultValue": "this.actions$.pipe(\n    ofType<productActions.LoadProducts>(\n        productActions.ProductActionTypes.LOAD_PRODUCTS\n    ),\n    mergeMap((action: productActions.LoadProducts) =>\n      this.httpService.getSecured(environment.getProducts).pipe(\n        map(\n          (products: Product[]) =>\n            new productActions.LoadProductsSuccess(products)\n        ),\n        catchError(err => of(new productActions.LoadProductsFail(err)))\n      )\n    )\n  )",
                    "type": "Observable<Action>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "updateProduct$",
                    "defaultValue": "this.actions$.pipe(\n    ofType<productActions.UpdateProduct>(\n        productActions.ProductActionTypes.UPDATE_PRODUCT\n    ),\n    mergeMap((action: productActions.UpdateProduct) =>\n      this.httpService.patchSecured(environment.getProductsById.replace('{id}', action.payload.id.toString()),action.payload).pipe(\n        switchMap(\n          (products: Product) =>[\n            new productActions.UpdateProductSuccess(products)\n          ]\n        ),\n        catchError(err => of(new productActions.UpdateProductFail(err)))\n      )\n    )\n  )",
                    "type": "Observable<Action>",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\n\nimport { Observable, of } from 'rxjs';\nimport { map, mergeMap, catchError, switchMap } from 'rxjs/operators';\n\nimport * as productActions from './product.action';\nimport { Product } from './product.model';\nimport {environment } from 'src/environments/environment';\nimport * as showModalActions from '../../../dashboard/products/store/product.action';\nimport { HttpService } from 'src/app/services/http.service';\n@Injectable()\nexport class ProductEffect {\n  constructor(\n    private actions$: Actions,\n    private httpService: HttpService\n  ) {}\n\n  @Effect()\n  loadProducts$: Observable<Action> = this.actions$.pipe(\n    ofType<productActions.LoadProducts>(\n        productActions.ProductActionTypes.LOAD_PRODUCTS\n    ),\n    mergeMap((action: productActions.LoadProducts) =>\n      this.httpService.getSecured(environment.getProducts).pipe(\n        map(\n          (products: Product[]) =>\n            new productActions.LoadProductsSuccess(products)\n        ),\n        catchError(err => of(new productActions.LoadProductsFail(err)))\n      )\n    )\n  );\n\n  @Effect()\n  createProducts$: Observable<Action> = this.actions$.pipe(\n    ofType<productActions.CreateProduct>(\n        productActions.ProductActionTypes.CREATE_PRODUCT\n    ),\n    mergeMap((action: productActions.CreateProduct) =>\n      this.httpService.postSecured(environment.addProducts,action.payload).pipe(\n        switchMap(\n          (newproduct: Product) =>[\n            new productActions.CreateProductSuccess(newproduct)\n        ]\n        ),\n        catchError(err => of(new productActions.CreateProductFail(err)))\n      )\n    )\n  );\n\n\n  @Effect()\n  loadProduct$: Observable<Action> = this.actions$.pipe(\n    ofType<productActions.LoadProduct>(\n        productActions.ProductActionTypes.LOAD_PRODUCT\n    ),\n    mergeMap((action: productActions.LoadProduct) =>\n      this.httpService.getSecured(environment.getProductsById.replace('{id}', action.payload.toString())).pipe(\n        map(\n          (products: Product) =>\n            new productActions.LoadProductSuccess(products)\n        ),\n        catchError(err => of(new productActions.LoadProductFail(err)))\n      )\n    )\n  );\n\n  @Effect()\n  updateProduct$: Observable<Action> = this.actions$.pipe(\n    ofType<productActions.UpdateProduct>(\n        productActions.ProductActionTypes.UPDATE_PRODUCT\n    ),\n    mergeMap((action: productActions.UpdateProduct) =>\n      this.httpService.patchSecured(environment.getProductsById.replace('{id}', action.payload.id.toString()),action.payload).pipe(\n        switchMap(\n          (products: Product) =>[\n            new productActions.UpdateProductSuccess(products)\n          ]\n        ),\n        catchError(err => of(new productActions.UpdateProductFail(err)))\n      )\n    )\n  );\n\n  @Effect()\n  deleteProduct$: Observable<Action> = this.actions$.pipe(\n    ofType<productActions.DeleteProduct>(\n        productActions.ProductActionTypes.DELETE_PRODUCT\n    ),\n    mergeMap((action: productActions.DeleteProduct) =>\n      this.httpService.deleteSecured(environment.deleteProducts.replace('{id}', action.payload.toString())).pipe(\n        map(\n          () =>\n            new productActions.DeleteProductSuccess(action.payload)\n        ),\n        catchError(err => of(new productActions.DeleteProductFail(err)))\n      )\n    )\n  );\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "httpService",
                        "type": "HttpService"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "httpService",
                        "type": "HttpService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ThemeService",
            "id": "injectable-ThemeService-6c5405972d4afc8698cbdf62bb778453",
            "file": "src/app/services/theme/theme.service.ts",
            "properties": [
                {
                    "name": "active",
                    "defaultValue": "light",
                    "type": "Theme",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "availableThemes",
                    "defaultValue": "[light, dark]",
                    "type": "Theme[]",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getActiveTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "Theme",
                    "typeParameters": [],
                    "line": 15
                },
                {
                    "name": "getAvailableThemes",
                    "args": [],
                    "optional": false,
                    "returnType": "Theme[]",
                    "typeParameters": [],
                    "line": 11
                },
                {
                    "name": "isDarkTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "setActiveTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": "Theme"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "Theme",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDarkTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "setLightTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Theme, light, dark } from '../../theme/theme';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ThemeService {\n  private active: Theme = light;\n  private availableThemes: Theme[] = [light, dark];\n\n  getAvailableThemes(): Theme[] {\n    return this.availableThemes;\n  }\n\n  getActiveTheme(): Theme {\n    return this.active;\n  }\n\n  isDarkTheme(): boolean {\n    return this.active.name === dark.name;\n  }\n\n  setDarkTheme(): void {\n    this.setActiveTheme(dark);\n  }\n\n  setLightTheme(): void {\n    this.setActiveTheme(light);\n  }\n\n  setActiveTheme(theme: Theme): void {\n    this.active = theme;\n\n    Object.keys(this.active.properties).forEach((property) => {\n      document.documentElement.style.setProperty(\n        property,\n        this.active.properties[property]\n      );\n    });\n  }\n}\n",
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppMocks",
            "id": "class-AppMocks-fa92019b0b2188847566cb826ecbe811",
            "file": "src/app/mocks/mocks.ts",
            "type": "class",
            "sourceCode": "import { FormBuilder } from '@angular/forms';\nimport { of } from 'rxjs';\n\nexport class AppMocks {\n  public static getThemeServiceMock = () => {\n    return {\n      isDarkTheme: jest.fn(() => false),\n      setDarkTheme: jest.fn(() => {}),\n      setLightTheme: jest.fn(() => {}),\n      setActiveTheme: jest.fn(() => {}),\n    };\n  };\n\n  public static getMockStoreService = () => {\n    return {\n      dispatch: (v) => jest.fn(() => {}),\n      pipe: jest.fn(() => of({})),\n      subscribe: jest.fn(() => of({})),\n    };\n  };\n\n  public static getMockAuthService = () => {\n    return {\n      signIn: jest.fn(() => {}),\n      register: jest.fn(() => {}),\n      isLoggedIn: jest.fn(() => {}),\n      logout: jest.fn(() => {}),\n    };\n  };\n\n  public static getMockProductService = () => {\n    return {\n      addProductPopUp: jest.fn(() => {}),\n      hideAddProductPopUp: jest.fn(() => {}),\n      getProducts: jest.fn(() => {}),\n      editProduct: jest.fn(() => {}),\n    };\n  };\n\n  public static getMockFormGroup = () => {\n    const myModel = {\n      valid: true,\n      value: null,\n    };\n    const fb = new FormBuilder();\n    return fb.group(myModel);\n  };\n}\n\n\n\n",
            "properties": [
                {
                    "name": "getMockAuthService",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "getMockFormGroup",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "getMockProductService",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "getMockStoreService",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "getThemeServiceMock",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        115
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CreateProduct",
            "id": "class-CreateProduct-b8ed3482fa12a4e571b08c97e6b2af98",
            "file": "src/app/components/dashboard/products/store/product.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Product } from './product.model';\n\nexport enum ProductActionTypes {\n  LOAD_PRODUCTS = '[Product] Load Products',\n  LOAD_PRODUCTS_SUCCESS = '[Product] Load Products Success',\n  LOAD_PRODUCTS_FAIL = '[Product] Load Products Fail',\n  CREATE_PRODUCT = '[Product] Create Products',\n  CREATE_PRODUCT_SUCCESS = '[Product] Create Product Success',\n  CREATE_PRODUCT_FAIL = '[Product] Create Product Fail',\n  LOAD_PRODUCT = '[Product] Load Product',\n  LOAD_PRODUCT_SUCCESS = '[Product] Load Product Success',\n  LOAD_PRODUCT_FAIL = '[Product] Load Product Fail',\n  UPDATE_PRODUCT = '[Product] Update Product',\n  UPDATE_PRODUCT_SUCCESS = '[Product] Update Product Success',\n  UPDATE_PRODUCT_FAIL = '[Product] Update Product Fail',\n  DELETE_PRODUCT = '[Product] Delete Product',\n  DELETE_PRODUCT_SUCCESS = '[Product] Delete Product Success',\n  DELETE_PRODUCT_FAIL = '[Product] Delete Product Fail',\n\n}\n// get Products\nexport class LoadProducts implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS;\n}\nexport class LoadProductsSuccess implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS_SUCCESS;\n  constructor(public payload: Product[]) {}\n}\n\nexport class LoadProductsFail implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS_FAIL;\n  constructor(public payload: string) {}\n}\n// create Product\nexport class CreateProduct implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT;\n  constructor(public payload: Product) {}\n}\nexport class CreateProductSuccess implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class CreateProductFail implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// get Product by id\nexport class LoadProduct implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT;\n  constructor(public payload: number) {}\n}\nexport class LoadProductSuccess implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class LoadProductFail implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// update Product by id\nexport class UpdateProduct implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT;\n  constructor(public payload: Product) {}\n}\nexport class UpdateProductSuccess implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class UpdateProductFail implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// update Product by id\nexport class DeleteProduct implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT;\n  constructor(public payload: number) {}\n}\nexport class DeleteProductSuccess implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT_SUCCESS;\n  constructor(public payload: number) {}\n}\n\nexport class DeleteProductFail implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n\nexport type ProductAction =\n  | LoadProducts\n  | LoadProductsSuccess\n  | LoadProductsFail\n  | CreateProduct\n  | CreateProductSuccess\n  | CreateProductFail\n  | LoadProduct\n  | LoadProductSuccess\n  | LoadProductFail\n  | UpdateProduct\n  | UpdateProductSuccess\n  | UpdateProductFail\n  | DeleteProduct\n  | DeleteProductSuccess\n  | DeleteProductFail;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Product"
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Product",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Product",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ProductActionTypes.CREATE_PRODUCT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "CreateProductFail",
            "id": "class-CreateProductFail-b8ed3482fa12a4e571b08c97e6b2af98",
            "file": "src/app/components/dashboard/products/store/product.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Product } from './product.model';\n\nexport enum ProductActionTypes {\n  LOAD_PRODUCTS = '[Product] Load Products',\n  LOAD_PRODUCTS_SUCCESS = '[Product] Load Products Success',\n  LOAD_PRODUCTS_FAIL = '[Product] Load Products Fail',\n  CREATE_PRODUCT = '[Product] Create Products',\n  CREATE_PRODUCT_SUCCESS = '[Product] Create Product Success',\n  CREATE_PRODUCT_FAIL = '[Product] Create Product Fail',\n  LOAD_PRODUCT = '[Product] Load Product',\n  LOAD_PRODUCT_SUCCESS = '[Product] Load Product Success',\n  LOAD_PRODUCT_FAIL = '[Product] Load Product Fail',\n  UPDATE_PRODUCT = '[Product] Update Product',\n  UPDATE_PRODUCT_SUCCESS = '[Product] Update Product Success',\n  UPDATE_PRODUCT_FAIL = '[Product] Update Product Fail',\n  DELETE_PRODUCT = '[Product] Delete Product',\n  DELETE_PRODUCT_SUCCESS = '[Product] Delete Product Success',\n  DELETE_PRODUCT_FAIL = '[Product] Delete Product Fail',\n\n}\n// get Products\nexport class LoadProducts implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS;\n}\nexport class LoadProductsSuccess implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS_SUCCESS;\n  constructor(public payload: Product[]) {}\n}\n\nexport class LoadProductsFail implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS_FAIL;\n  constructor(public payload: string) {}\n}\n// create Product\nexport class CreateProduct implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT;\n  constructor(public payload: Product) {}\n}\nexport class CreateProductSuccess implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class CreateProductFail implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// get Product by id\nexport class LoadProduct implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT;\n  constructor(public payload: number) {}\n}\nexport class LoadProductSuccess implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class LoadProductFail implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// update Product by id\nexport class UpdateProduct implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT;\n  constructor(public payload: Product) {}\n}\nexport class UpdateProductSuccess implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class UpdateProductFail implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// update Product by id\nexport class DeleteProduct implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT;\n  constructor(public payload: number) {}\n}\nexport class DeleteProductSuccess implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT_SUCCESS;\n  constructor(public payload: number) {}\n}\n\nexport class DeleteProductFail implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n\nexport type ProductAction =\n  | LoadProducts\n  | LoadProductsSuccess\n  | LoadProductsFail\n  | CreateProduct\n  | CreateProductSuccess\n  | CreateProductFail\n  | LoadProduct\n  | LoadProductSuccess\n  | LoadProductFail\n  | UpdateProduct\n  | UpdateProductSuccess\n  | UpdateProductFail\n  | DeleteProduct\n  | DeleteProductSuccess\n  | DeleteProductFail;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string"
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ProductActionTypes.CREATE_PRODUCT_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "CreateProductSuccess",
            "id": "class-CreateProductSuccess-b8ed3482fa12a4e571b08c97e6b2af98",
            "file": "src/app/components/dashboard/products/store/product.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Product } from './product.model';\n\nexport enum ProductActionTypes {\n  LOAD_PRODUCTS = '[Product] Load Products',\n  LOAD_PRODUCTS_SUCCESS = '[Product] Load Products Success',\n  LOAD_PRODUCTS_FAIL = '[Product] Load Products Fail',\n  CREATE_PRODUCT = '[Product] Create Products',\n  CREATE_PRODUCT_SUCCESS = '[Product] Create Product Success',\n  CREATE_PRODUCT_FAIL = '[Product] Create Product Fail',\n  LOAD_PRODUCT = '[Product] Load Product',\n  LOAD_PRODUCT_SUCCESS = '[Product] Load Product Success',\n  LOAD_PRODUCT_FAIL = '[Product] Load Product Fail',\n  UPDATE_PRODUCT = '[Product] Update Product',\n  UPDATE_PRODUCT_SUCCESS = '[Product] Update Product Success',\n  UPDATE_PRODUCT_FAIL = '[Product] Update Product Fail',\n  DELETE_PRODUCT = '[Product] Delete Product',\n  DELETE_PRODUCT_SUCCESS = '[Product] Delete Product Success',\n  DELETE_PRODUCT_FAIL = '[Product] Delete Product Fail',\n\n}\n// get Products\nexport class LoadProducts implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS;\n}\nexport class LoadProductsSuccess implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS_SUCCESS;\n  constructor(public payload: Product[]) {}\n}\n\nexport class LoadProductsFail implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS_FAIL;\n  constructor(public payload: string) {}\n}\n// create Product\nexport class CreateProduct implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT;\n  constructor(public payload: Product) {}\n}\nexport class CreateProductSuccess implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class CreateProductFail implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// get Product by id\nexport class LoadProduct implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT;\n  constructor(public payload: number) {}\n}\nexport class LoadProductSuccess implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class LoadProductFail implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// update Product by id\nexport class UpdateProduct implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT;\n  constructor(public payload: Product) {}\n}\nexport class UpdateProductSuccess implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class UpdateProductFail implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// update Product by id\nexport class DeleteProduct implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT;\n  constructor(public payload: number) {}\n}\nexport class DeleteProductSuccess implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT_SUCCESS;\n  constructor(public payload: number) {}\n}\n\nexport class DeleteProductFail implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n\nexport type ProductAction =\n  | LoadProducts\n  | LoadProductsSuccess\n  | LoadProductsFail\n  | CreateProduct\n  | CreateProductSuccess\n  | CreateProductFail\n  | LoadProduct\n  | LoadProductSuccess\n  | LoadProductFail\n  | UpdateProduct\n  | UpdateProductSuccess\n  | UpdateProductFail\n  | DeleteProduct\n  | DeleteProductSuccess\n  | DeleteProductFail;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Product"
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Product",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Product",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ProductActionTypes.CREATE_PRODUCT_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "CustomBtnElement",
            "id": "class-CustomBtnElement-0ccaa7bc7440210464f4531a7e29b8de",
            "file": "src/app/lit-element/button-element.ts",
            "type": "class",
            "sourceCode": "import { LitElement, html, customElement, property, css } from 'lit-element';\n\n@customElement('foodie-button')\nexport class CustomBtnElement extends LitElement {\n  @property({ type: String })\n  title;\n\n  // tslint:disable-next-line: typedef\n  static get styles() {\n    return css`\n      .lit-btn {\n        background: var(--foreground-default);\n        color: var(--primary-light);\n        padding: 0.2em 0.5em;\n        font-size: 1.25rem;\n        border-radius: 4px;\n        cursor: pointer;\n        box-shadow: var(--background-tertiary-shadow);\n      }\n    `;\n  }\n\n  // tslint:disable-next-line: typedef\n  render() {\n    return html` <button class=\"lit-btn\">${this.title}</button> `;\n  }\n}\n",
            "properties": [
                {
                    "name": "title",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "decorators": [
                        {
                            "name": "property",
                            "stringifiedArguments": "{type: String}"
                        }
                    ]
                }
            ],
            "methods": [
                {
                    "name": "render",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "extends": "LitElement",
            "accessors": {
                "styles": {
                    "name": "styles",
                    "getSignature": {
                        "name": "styles",
                        "type": "",
                        "returnType": "",
                        "line": 9
                    }
                }
            }
        },
        {
            "name": "DeleteProduct",
            "id": "class-DeleteProduct-b8ed3482fa12a4e571b08c97e6b2af98",
            "file": "src/app/components/dashboard/products/store/product.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Product } from './product.model';\n\nexport enum ProductActionTypes {\n  LOAD_PRODUCTS = '[Product] Load Products',\n  LOAD_PRODUCTS_SUCCESS = '[Product] Load Products Success',\n  LOAD_PRODUCTS_FAIL = '[Product] Load Products Fail',\n  CREATE_PRODUCT = '[Product] Create Products',\n  CREATE_PRODUCT_SUCCESS = '[Product] Create Product Success',\n  CREATE_PRODUCT_FAIL = '[Product] Create Product Fail',\n  LOAD_PRODUCT = '[Product] Load Product',\n  LOAD_PRODUCT_SUCCESS = '[Product] Load Product Success',\n  LOAD_PRODUCT_FAIL = '[Product] Load Product Fail',\n  UPDATE_PRODUCT = '[Product] Update Product',\n  UPDATE_PRODUCT_SUCCESS = '[Product] Update Product Success',\n  UPDATE_PRODUCT_FAIL = '[Product] Update Product Fail',\n  DELETE_PRODUCT = '[Product] Delete Product',\n  DELETE_PRODUCT_SUCCESS = '[Product] Delete Product Success',\n  DELETE_PRODUCT_FAIL = '[Product] Delete Product Fail',\n\n}\n// get Products\nexport class LoadProducts implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS;\n}\nexport class LoadProductsSuccess implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS_SUCCESS;\n  constructor(public payload: Product[]) {}\n}\n\nexport class LoadProductsFail implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS_FAIL;\n  constructor(public payload: string) {}\n}\n// create Product\nexport class CreateProduct implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT;\n  constructor(public payload: Product) {}\n}\nexport class CreateProductSuccess implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class CreateProductFail implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// get Product by id\nexport class LoadProduct implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT;\n  constructor(public payload: number) {}\n}\nexport class LoadProductSuccess implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class LoadProductFail implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// update Product by id\nexport class UpdateProduct implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT;\n  constructor(public payload: Product) {}\n}\nexport class UpdateProductSuccess implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class UpdateProductFail implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// update Product by id\nexport class DeleteProduct implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT;\n  constructor(public payload: number) {}\n}\nexport class DeleteProductSuccess implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT_SUCCESS;\n  constructor(public payload: number) {}\n}\n\nexport class DeleteProductFail implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n\nexport type ProductAction =\n  | LoadProducts\n  | LoadProductsSuccess\n  | LoadProductsFail\n  | CreateProduct\n  | CreateProductSuccess\n  | CreateProductFail\n  | LoadProduct\n  | LoadProductSuccess\n  | LoadProductFail\n  | UpdateProduct\n  | UpdateProductSuccess\n  | UpdateProductFail\n  | DeleteProduct\n  | DeleteProductSuccess\n  | DeleteProductFail;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "number"
                    }
                ],
                "line": 82,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ProductActionTypes.DELETE_PRODUCT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "DeleteProductFail",
            "id": "class-DeleteProductFail-b8ed3482fa12a4e571b08c97e6b2af98",
            "file": "src/app/components/dashboard/products/store/product.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Product } from './product.model';\n\nexport enum ProductActionTypes {\n  LOAD_PRODUCTS = '[Product] Load Products',\n  LOAD_PRODUCTS_SUCCESS = '[Product] Load Products Success',\n  LOAD_PRODUCTS_FAIL = '[Product] Load Products Fail',\n  CREATE_PRODUCT = '[Product] Create Products',\n  CREATE_PRODUCT_SUCCESS = '[Product] Create Product Success',\n  CREATE_PRODUCT_FAIL = '[Product] Create Product Fail',\n  LOAD_PRODUCT = '[Product] Load Product',\n  LOAD_PRODUCT_SUCCESS = '[Product] Load Product Success',\n  LOAD_PRODUCT_FAIL = '[Product] Load Product Fail',\n  UPDATE_PRODUCT = '[Product] Update Product',\n  UPDATE_PRODUCT_SUCCESS = '[Product] Update Product Success',\n  UPDATE_PRODUCT_FAIL = '[Product] Update Product Fail',\n  DELETE_PRODUCT = '[Product] Delete Product',\n  DELETE_PRODUCT_SUCCESS = '[Product] Delete Product Success',\n  DELETE_PRODUCT_FAIL = '[Product] Delete Product Fail',\n\n}\n// get Products\nexport class LoadProducts implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS;\n}\nexport class LoadProductsSuccess implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS_SUCCESS;\n  constructor(public payload: Product[]) {}\n}\n\nexport class LoadProductsFail implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS_FAIL;\n  constructor(public payload: string) {}\n}\n// create Product\nexport class CreateProduct implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT;\n  constructor(public payload: Product) {}\n}\nexport class CreateProductSuccess implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class CreateProductFail implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// get Product by id\nexport class LoadProduct implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT;\n  constructor(public payload: number) {}\n}\nexport class LoadProductSuccess implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class LoadProductFail implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// update Product by id\nexport class UpdateProduct implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT;\n  constructor(public payload: Product) {}\n}\nexport class UpdateProductSuccess implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class UpdateProductFail implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// update Product by id\nexport class DeleteProduct implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT;\n  constructor(public payload: number) {}\n}\nexport class DeleteProductSuccess implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT_SUCCESS;\n  constructor(public payload: number) {}\n}\n\nexport class DeleteProductFail implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n\nexport type ProductAction =\n  | LoadProducts\n  | LoadProductsSuccess\n  | LoadProductsFail\n  | CreateProduct\n  | CreateProductSuccess\n  | CreateProductFail\n  | LoadProduct\n  | LoadProductSuccess\n  | LoadProductFail\n  | UpdateProduct\n  | UpdateProductSuccess\n  | UpdateProductFail\n  | DeleteProduct\n  | DeleteProductSuccess\n  | DeleteProductFail;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string"
                    }
                ],
                "line": 91,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ProductActionTypes.DELETE_PRODUCT_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "DeleteProductSuccess",
            "id": "class-DeleteProductSuccess-b8ed3482fa12a4e571b08c97e6b2af98",
            "file": "src/app/components/dashboard/products/store/product.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Product } from './product.model';\n\nexport enum ProductActionTypes {\n  LOAD_PRODUCTS = '[Product] Load Products',\n  LOAD_PRODUCTS_SUCCESS = '[Product] Load Products Success',\n  LOAD_PRODUCTS_FAIL = '[Product] Load Products Fail',\n  CREATE_PRODUCT = '[Product] Create Products',\n  CREATE_PRODUCT_SUCCESS = '[Product] Create Product Success',\n  CREATE_PRODUCT_FAIL = '[Product] Create Product Fail',\n  LOAD_PRODUCT = '[Product] Load Product',\n  LOAD_PRODUCT_SUCCESS = '[Product] Load Product Success',\n  LOAD_PRODUCT_FAIL = '[Product] Load Product Fail',\n  UPDATE_PRODUCT = '[Product] Update Product',\n  UPDATE_PRODUCT_SUCCESS = '[Product] Update Product Success',\n  UPDATE_PRODUCT_FAIL = '[Product] Update Product Fail',\n  DELETE_PRODUCT = '[Product] Delete Product',\n  DELETE_PRODUCT_SUCCESS = '[Product] Delete Product Success',\n  DELETE_PRODUCT_FAIL = '[Product] Delete Product Fail',\n\n}\n// get Products\nexport class LoadProducts implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS;\n}\nexport class LoadProductsSuccess implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS_SUCCESS;\n  constructor(public payload: Product[]) {}\n}\n\nexport class LoadProductsFail implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS_FAIL;\n  constructor(public payload: string) {}\n}\n// create Product\nexport class CreateProduct implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT;\n  constructor(public payload: Product) {}\n}\nexport class CreateProductSuccess implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class CreateProductFail implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// get Product by id\nexport class LoadProduct implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT;\n  constructor(public payload: number) {}\n}\nexport class LoadProductSuccess implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class LoadProductFail implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// update Product by id\nexport class UpdateProduct implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT;\n  constructor(public payload: Product) {}\n}\nexport class UpdateProductSuccess implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class UpdateProductFail implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// update Product by id\nexport class DeleteProduct implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT;\n  constructor(public payload: number) {}\n}\nexport class DeleteProductSuccess implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT_SUCCESS;\n  constructor(public payload: number) {}\n}\n\nexport class DeleteProductFail implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n\nexport type ProductAction =\n  | LoadProducts\n  | LoadProductsSuccess\n  | LoadProductsFail\n  | CreateProduct\n  | CreateProductSuccess\n  | CreateProductFail\n  | LoadProduct\n  | LoadProductSuccess\n  | LoadProductFail\n  | UpdateProduct\n  | UpdateProductSuccess\n  | UpdateProductFail\n  | DeleteProduct\n  | DeleteProductSuccess\n  | DeleteProductFail;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "number"
                    }
                ],
                "line": 86,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ProductActionTypes.DELETE_PRODUCT_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "HideAddProductAction",
            "id": "class-HideAddProductAction-d3f14bd903d1126d6c30685d391e7c19",
            "file": "src/app/components/store/action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\nexport const SHOW_ADD_PRODUCT = 'SHOW_ADD_PRODUCT';\nexport const HIDE_ADD_PRODUCT = 'HIDE_ADD_PRODUCT';\nexport const SHOW_EDIT_PRODUCT = 'SHOW_EDIT_PRODUCT';\nexport const HIDE_EDIT_PRODUCT = 'HIDE_EDIT_PRODUCT';\n\n\nexport class ShowAddProductAction implements Action {\n readonly type = SHOW_ADD_PRODUCT;\n\n constructor() { }\n}\n\nexport class HideAddProductAction implements Action {\n  readonly type = HIDE_ADD_PRODUCT;\n\n  constructor() { }\n}\nexport class ShowEditProductAction implements Action {\n readonly type = SHOW_EDIT_PRODUCT;\n\n constructor() { }\n}\n\nexport class HideEditProductAction implements Action {\n  readonly type = HIDE_EDIT_PRODUCT;\n\n  constructor() { }\n}\n\nexport type Actions\n  =\n  | ShowAddProductAction\n  | HideAddProductAction\n  | ShowEditProductAction\n  | HideEditProductAction;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 16
            },
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "HIDE_ADD_PRODUCT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "HideEditProductAction",
            "id": "class-HideEditProductAction-d3f14bd903d1126d6c30685d391e7c19",
            "file": "src/app/components/store/action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\nexport const SHOW_ADD_PRODUCT = 'SHOW_ADD_PRODUCT';\nexport const HIDE_ADD_PRODUCT = 'HIDE_ADD_PRODUCT';\nexport const SHOW_EDIT_PRODUCT = 'SHOW_EDIT_PRODUCT';\nexport const HIDE_EDIT_PRODUCT = 'HIDE_EDIT_PRODUCT';\n\n\nexport class ShowAddProductAction implements Action {\n readonly type = SHOW_ADD_PRODUCT;\n\n constructor() { }\n}\n\nexport class HideAddProductAction implements Action {\n  readonly type = HIDE_ADD_PRODUCT;\n\n  constructor() { }\n}\nexport class ShowEditProductAction implements Action {\n readonly type = SHOW_EDIT_PRODUCT;\n\n constructor() { }\n}\n\nexport class HideEditProductAction implements Action {\n  readonly type = HIDE_EDIT_PRODUCT;\n\n  constructor() { }\n}\n\nexport type Actions\n  =\n  | ShowAddProductAction\n  | HideAddProductAction\n  | ShowEditProductAction\n  | HideEditProductAction;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 27
            },
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "HIDE_EDIT_PRODUCT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadProduct",
            "id": "class-LoadProduct-b8ed3482fa12a4e571b08c97e6b2af98",
            "file": "src/app/components/dashboard/products/store/product.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Product } from './product.model';\n\nexport enum ProductActionTypes {\n  LOAD_PRODUCTS = '[Product] Load Products',\n  LOAD_PRODUCTS_SUCCESS = '[Product] Load Products Success',\n  LOAD_PRODUCTS_FAIL = '[Product] Load Products Fail',\n  CREATE_PRODUCT = '[Product] Create Products',\n  CREATE_PRODUCT_SUCCESS = '[Product] Create Product Success',\n  CREATE_PRODUCT_FAIL = '[Product] Create Product Fail',\n  LOAD_PRODUCT = '[Product] Load Product',\n  LOAD_PRODUCT_SUCCESS = '[Product] Load Product Success',\n  LOAD_PRODUCT_FAIL = '[Product] Load Product Fail',\n  UPDATE_PRODUCT = '[Product] Update Product',\n  UPDATE_PRODUCT_SUCCESS = '[Product] Update Product Success',\n  UPDATE_PRODUCT_FAIL = '[Product] Update Product Fail',\n  DELETE_PRODUCT = '[Product] Delete Product',\n  DELETE_PRODUCT_SUCCESS = '[Product] Delete Product Success',\n  DELETE_PRODUCT_FAIL = '[Product] Delete Product Fail',\n\n}\n// get Products\nexport class LoadProducts implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS;\n}\nexport class LoadProductsSuccess implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS_SUCCESS;\n  constructor(public payload: Product[]) {}\n}\n\nexport class LoadProductsFail implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS_FAIL;\n  constructor(public payload: string) {}\n}\n// create Product\nexport class CreateProduct implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT;\n  constructor(public payload: Product) {}\n}\nexport class CreateProductSuccess implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class CreateProductFail implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// get Product by id\nexport class LoadProduct implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT;\n  constructor(public payload: number) {}\n}\nexport class LoadProductSuccess implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class LoadProductFail implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// update Product by id\nexport class UpdateProduct implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT;\n  constructor(public payload: Product) {}\n}\nexport class UpdateProductSuccess implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class UpdateProductFail implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// update Product by id\nexport class DeleteProduct implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT;\n  constructor(public payload: number) {}\n}\nexport class DeleteProductSuccess implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT_SUCCESS;\n  constructor(public payload: number) {}\n}\n\nexport class DeleteProductFail implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n\nexport type ProductAction =\n  | LoadProducts\n  | LoadProductsSuccess\n  | LoadProductsFail\n  | CreateProduct\n  | CreateProductSuccess\n  | CreateProductFail\n  | LoadProduct\n  | LoadProductSuccess\n  | LoadProductFail\n  | UpdateProduct\n  | UpdateProductSuccess\n  | UpdateProductFail\n  | DeleteProduct\n  | DeleteProductSuccess\n  | DeleteProductFail;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "number"
                    }
                ],
                "line": 52,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ProductActionTypes.LOAD_PRODUCT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadProductFail",
            "id": "class-LoadProductFail-b8ed3482fa12a4e571b08c97e6b2af98",
            "file": "src/app/components/dashboard/products/store/product.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Product } from './product.model';\n\nexport enum ProductActionTypes {\n  LOAD_PRODUCTS = '[Product] Load Products',\n  LOAD_PRODUCTS_SUCCESS = '[Product] Load Products Success',\n  LOAD_PRODUCTS_FAIL = '[Product] Load Products Fail',\n  CREATE_PRODUCT = '[Product] Create Products',\n  CREATE_PRODUCT_SUCCESS = '[Product] Create Product Success',\n  CREATE_PRODUCT_FAIL = '[Product] Create Product Fail',\n  LOAD_PRODUCT = '[Product] Load Product',\n  LOAD_PRODUCT_SUCCESS = '[Product] Load Product Success',\n  LOAD_PRODUCT_FAIL = '[Product] Load Product Fail',\n  UPDATE_PRODUCT = '[Product] Update Product',\n  UPDATE_PRODUCT_SUCCESS = '[Product] Update Product Success',\n  UPDATE_PRODUCT_FAIL = '[Product] Update Product Fail',\n  DELETE_PRODUCT = '[Product] Delete Product',\n  DELETE_PRODUCT_SUCCESS = '[Product] Delete Product Success',\n  DELETE_PRODUCT_FAIL = '[Product] Delete Product Fail',\n\n}\n// get Products\nexport class LoadProducts implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS;\n}\nexport class LoadProductsSuccess implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS_SUCCESS;\n  constructor(public payload: Product[]) {}\n}\n\nexport class LoadProductsFail implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS_FAIL;\n  constructor(public payload: string) {}\n}\n// create Product\nexport class CreateProduct implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT;\n  constructor(public payload: Product) {}\n}\nexport class CreateProductSuccess implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class CreateProductFail implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// get Product by id\nexport class LoadProduct implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT;\n  constructor(public payload: number) {}\n}\nexport class LoadProductSuccess implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class LoadProductFail implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// update Product by id\nexport class UpdateProduct implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT;\n  constructor(public payload: Product) {}\n}\nexport class UpdateProductSuccess implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class UpdateProductFail implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// update Product by id\nexport class DeleteProduct implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT;\n  constructor(public payload: number) {}\n}\nexport class DeleteProductSuccess implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT_SUCCESS;\n  constructor(public payload: number) {}\n}\n\nexport class DeleteProductFail implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n\nexport type ProductAction =\n  | LoadProducts\n  | LoadProductsSuccess\n  | LoadProductsFail\n  | CreateProduct\n  | CreateProductSuccess\n  | CreateProductFail\n  | LoadProduct\n  | LoadProductSuccess\n  | LoadProductFail\n  | UpdateProduct\n  | UpdateProductSuccess\n  | UpdateProductFail\n  | DeleteProduct\n  | DeleteProductSuccess\n  | DeleteProductFail;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string"
                    }
                ],
                "line": 61,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ProductActionTypes.LOAD_PRODUCT_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadProducts",
            "id": "class-LoadProducts-b8ed3482fa12a4e571b08c97e6b2af98",
            "file": "src/app/components/dashboard/products/store/product.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Product } from './product.model';\n\nexport enum ProductActionTypes {\n  LOAD_PRODUCTS = '[Product] Load Products',\n  LOAD_PRODUCTS_SUCCESS = '[Product] Load Products Success',\n  LOAD_PRODUCTS_FAIL = '[Product] Load Products Fail',\n  CREATE_PRODUCT = '[Product] Create Products',\n  CREATE_PRODUCT_SUCCESS = '[Product] Create Product Success',\n  CREATE_PRODUCT_FAIL = '[Product] Create Product Fail',\n  LOAD_PRODUCT = '[Product] Load Product',\n  LOAD_PRODUCT_SUCCESS = '[Product] Load Product Success',\n  LOAD_PRODUCT_FAIL = '[Product] Load Product Fail',\n  UPDATE_PRODUCT = '[Product] Update Product',\n  UPDATE_PRODUCT_SUCCESS = '[Product] Update Product Success',\n  UPDATE_PRODUCT_FAIL = '[Product] Update Product Fail',\n  DELETE_PRODUCT = '[Product] Delete Product',\n  DELETE_PRODUCT_SUCCESS = '[Product] Delete Product Success',\n  DELETE_PRODUCT_FAIL = '[Product] Delete Product Fail',\n\n}\n// get Products\nexport class LoadProducts implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS;\n}\nexport class LoadProductsSuccess implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS_SUCCESS;\n  constructor(public payload: Product[]) {}\n}\n\nexport class LoadProductsFail implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS_FAIL;\n  constructor(public payload: string) {}\n}\n// create Product\nexport class CreateProduct implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT;\n  constructor(public payload: Product) {}\n}\nexport class CreateProductSuccess implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class CreateProductFail implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// get Product by id\nexport class LoadProduct implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT;\n  constructor(public payload: number) {}\n}\nexport class LoadProductSuccess implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class LoadProductFail implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// update Product by id\nexport class UpdateProduct implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT;\n  constructor(public payload: Product) {}\n}\nexport class UpdateProductSuccess implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class UpdateProductFail implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// update Product by id\nexport class DeleteProduct implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT;\n  constructor(public payload: number) {}\n}\nexport class DeleteProductSuccess implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT_SUCCESS;\n  constructor(public payload: number) {}\n}\n\nexport class DeleteProductFail implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n\nexport type ProductAction =\n  | LoadProducts\n  | LoadProductsSuccess\n  | LoadProductsFail\n  | CreateProduct\n  | CreateProductSuccess\n  | CreateProductFail\n  | LoadProduct\n  | LoadProductSuccess\n  | LoadProductFail\n  | UpdateProduct\n  | UpdateProductSuccess\n  | UpdateProductFail\n  | DeleteProduct\n  | DeleteProductSuccess\n  | DeleteProductFail;\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "ProductActionTypes.LOAD_PRODUCTS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadProductsFail",
            "id": "class-LoadProductsFail-b8ed3482fa12a4e571b08c97e6b2af98",
            "file": "src/app/components/dashboard/products/store/product.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Product } from './product.model';\n\nexport enum ProductActionTypes {\n  LOAD_PRODUCTS = '[Product] Load Products',\n  LOAD_PRODUCTS_SUCCESS = '[Product] Load Products Success',\n  LOAD_PRODUCTS_FAIL = '[Product] Load Products Fail',\n  CREATE_PRODUCT = '[Product] Create Products',\n  CREATE_PRODUCT_SUCCESS = '[Product] Create Product Success',\n  CREATE_PRODUCT_FAIL = '[Product] Create Product Fail',\n  LOAD_PRODUCT = '[Product] Load Product',\n  LOAD_PRODUCT_SUCCESS = '[Product] Load Product Success',\n  LOAD_PRODUCT_FAIL = '[Product] Load Product Fail',\n  UPDATE_PRODUCT = '[Product] Update Product',\n  UPDATE_PRODUCT_SUCCESS = '[Product] Update Product Success',\n  UPDATE_PRODUCT_FAIL = '[Product] Update Product Fail',\n  DELETE_PRODUCT = '[Product] Delete Product',\n  DELETE_PRODUCT_SUCCESS = '[Product] Delete Product Success',\n  DELETE_PRODUCT_FAIL = '[Product] Delete Product Fail',\n\n}\n// get Products\nexport class LoadProducts implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS;\n}\nexport class LoadProductsSuccess implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS_SUCCESS;\n  constructor(public payload: Product[]) {}\n}\n\nexport class LoadProductsFail implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS_FAIL;\n  constructor(public payload: string) {}\n}\n// create Product\nexport class CreateProduct implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT;\n  constructor(public payload: Product) {}\n}\nexport class CreateProductSuccess implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class CreateProductFail implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// get Product by id\nexport class LoadProduct implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT;\n  constructor(public payload: number) {}\n}\nexport class LoadProductSuccess implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class LoadProductFail implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// update Product by id\nexport class UpdateProduct implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT;\n  constructor(public payload: Product) {}\n}\nexport class UpdateProductSuccess implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class UpdateProductFail implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// update Product by id\nexport class DeleteProduct implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT;\n  constructor(public payload: number) {}\n}\nexport class DeleteProductSuccess implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT_SUCCESS;\n  constructor(public payload: number) {}\n}\n\nexport class DeleteProductFail implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n\nexport type ProductAction =\n  | LoadProducts\n  | LoadProductsSuccess\n  | LoadProductsFail\n  | CreateProduct\n  | CreateProductSuccess\n  | CreateProductFail\n  | LoadProduct\n  | LoadProductSuccess\n  | LoadProductFail\n  | UpdateProduct\n  | UpdateProductSuccess\n  | UpdateProductFail\n  | DeleteProduct\n  | DeleteProductSuccess\n  | DeleteProductFail;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string"
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ProductActionTypes.LOAD_PRODUCTS_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadProductsSuccess",
            "id": "class-LoadProductsSuccess-b8ed3482fa12a4e571b08c97e6b2af98",
            "file": "src/app/components/dashboard/products/store/product.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Product } from './product.model';\n\nexport enum ProductActionTypes {\n  LOAD_PRODUCTS = '[Product] Load Products',\n  LOAD_PRODUCTS_SUCCESS = '[Product] Load Products Success',\n  LOAD_PRODUCTS_FAIL = '[Product] Load Products Fail',\n  CREATE_PRODUCT = '[Product] Create Products',\n  CREATE_PRODUCT_SUCCESS = '[Product] Create Product Success',\n  CREATE_PRODUCT_FAIL = '[Product] Create Product Fail',\n  LOAD_PRODUCT = '[Product] Load Product',\n  LOAD_PRODUCT_SUCCESS = '[Product] Load Product Success',\n  LOAD_PRODUCT_FAIL = '[Product] Load Product Fail',\n  UPDATE_PRODUCT = '[Product] Update Product',\n  UPDATE_PRODUCT_SUCCESS = '[Product] Update Product Success',\n  UPDATE_PRODUCT_FAIL = '[Product] Update Product Fail',\n  DELETE_PRODUCT = '[Product] Delete Product',\n  DELETE_PRODUCT_SUCCESS = '[Product] Delete Product Success',\n  DELETE_PRODUCT_FAIL = '[Product] Delete Product Fail',\n\n}\n// get Products\nexport class LoadProducts implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS;\n}\nexport class LoadProductsSuccess implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS_SUCCESS;\n  constructor(public payload: Product[]) {}\n}\n\nexport class LoadProductsFail implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS_FAIL;\n  constructor(public payload: string) {}\n}\n// create Product\nexport class CreateProduct implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT;\n  constructor(public payload: Product) {}\n}\nexport class CreateProductSuccess implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class CreateProductFail implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// get Product by id\nexport class LoadProduct implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT;\n  constructor(public payload: number) {}\n}\nexport class LoadProductSuccess implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class LoadProductFail implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// update Product by id\nexport class UpdateProduct implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT;\n  constructor(public payload: Product) {}\n}\nexport class UpdateProductSuccess implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class UpdateProductFail implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// update Product by id\nexport class DeleteProduct implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT;\n  constructor(public payload: number) {}\n}\nexport class DeleteProductSuccess implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT_SUCCESS;\n  constructor(public payload: number) {}\n}\n\nexport class DeleteProductFail implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n\nexport type ProductAction =\n  | LoadProducts\n  | LoadProductsSuccess\n  | LoadProductsFail\n  | CreateProduct\n  | CreateProductSuccess\n  | CreateProductFail\n  | LoadProduct\n  | LoadProductSuccess\n  | LoadProductFail\n  | UpdateProduct\n  | UpdateProductSuccess\n  | UpdateProductFail\n  | DeleteProduct\n  | DeleteProductSuccess\n  | DeleteProductFail;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Product[]"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Product[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Product[]",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ProductActionTypes.LOAD_PRODUCTS_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadProductSuccess",
            "id": "class-LoadProductSuccess-b8ed3482fa12a4e571b08c97e6b2af98",
            "file": "src/app/components/dashboard/products/store/product.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Product } from './product.model';\n\nexport enum ProductActionTypes {\n  LOAD_PRODUCTS = '[Product] Load Products',\n  LOAD_PRODUCTS_SUCCESS = '[Product] Load Products Success',\n  LOAD_PRODUCTS_FAIL = '[Product] Load Products Fail',\n  CREATE_PRODUCT = '[Product] Create Products',\n  CREATE_PRODUCT_SUCCESS = '[Product] Create Product Success',\n  CREATE_PRODUCT_FAIL = '[Product] Create Product Fail',\n  LOAD_PRODUCT = '[Product] Load Product',\n  LOAD_PRODUCT_SUCCESS = '[Product] Load Product Success',\n  LOAD_PRODUCT_FAIL = '[Product] Load Product Fail',\n  UPDATE_PRODUCT = '[Product] Update Product',\n  UPDATE_PRODUCT_SUCCESS = '[Product] Update Product Success',\n  UPDATE_PRODUCT_FAIL = '[Product] Update Product Fail',\n  DELETE_PRODUCT = '[Product] Delete Product',\n  DELETE_PRODUCT_SUCCESS = '[Product] Delete Product Success',\n  DELETE_PRODUCT_FAIL = '[Product] Delete Product Fail',\n\n}\n// get Products\nexport class LoadProducts implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS;\n}\nexport class LoadProductsSuccess implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS_SUCCESS;\n  constructor(public payload: Product[]) {}\n}\n\nexport class LoadProductsFail implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS_FAIL;\n  constructor(public payload: string) {}\n}\n// create Product\nexport class CreateProduct implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT;\n  constructor(public payload: Product) {}\n}\nexport class CreateProductSuccess implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class CreateProductFail implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// get Product by id\nexport class LoadProduct implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT;\n  constructor(public payload: number) {}\n}\nexport class LoadProductSuccess implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class LoadProductFail implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// update Product by id\nexport class UpdateProduct implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT;\n  constructor(public payload: Product) {}\n}\nexport class UpdateProductSuccess implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class UpdateProductFail implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// update Product by id\nexport class DeleteProduct implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT;\n  constructor(public payload: number) {}\n}\nexport class DeleteProductSuccess implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT_SUCCESS;\n  constructor(public payload: number) {}\n}\n\nexport class DeleteProductFail implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n\nexport type ProductAction =\n  | LoadProducts\n  | LoadProductsSuccess\n  | LoadProductsFail\n  | CreateProduct\n  | CreateProductSuccess\n  | CreateProductFail\n  | LoadProduct\n  | LoadProductSuccess\n  | LoadProductFail\n  | UpdateProduct\n  | UpdateProductSuccess\n  | UpdateProductFail\n  | DeleteProduct\n  | DeleteProductSuccess\n  | DeleteProductFail;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Product"
                    }
                ],
                "line": 56,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Product",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Product",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ProductActionTypes.LOAD_PRODUCT_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ShowAddProductAction",
            "id": "class-ShowAddProductAction-d3f14bd903d1126d6c30685d391e7c19",
            "file": "src/app/components/store/action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\nexport const SHOW_ADD_PRODUCT = 'SHOW_ADD_PRODUCT';\nexport const HIDE_ADD_PRODUCT = 'HIDE_ADD_PRODUCT';\nexport const SHOW_EDIT_PRODUCT = 'SHOW_EDIT_PRODUCT';\nexport const HIDE_EDIT_PRODUCT = 'HIDE_EDIT_PRODUCT';\n\n\nexport class ShowAddProductAction implements Action {\n readonly type = SHOW_ADD_PRODUCT;\n\n constructor() { }\n}\n\nexport class HideAddProductAction implements Action {\n  readonly type = HIDE_ADD_PRODUCT;\n\n  constructor() { }\n}\nexport class ShowEditProductAction implements Action {\n readonly type = SHOW_EDIT_PRODUCT;\n\n constructor() { }\n}\n\nexport class HideEditProductAction implements Action {\n  readonly type = HIDE_EDIT_PRODUCT;\n\n  constructor() { }\n}\n\nexport type Actions\n  =\n  | ShowAddProductAction\n  | HideAddProductAction\n  | ShowEditProductAction\n  | HideEditProductAction;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "SHOW_ADD_PRODUCT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ShowEditProductAction",
            "id": "class-ShowEditProductAction-d3f14bd903d1126d6c30685d391e7c19",
            "file": "src/app/components/store/action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\nexport const SHOW_ADD_PRODUCT = 'SHOW_ADD_PRODUCT';\nexport const HIDE_ADD_PRODUCT = 'HIDE_ADD_PRODUCT';\nexport const SHOW_EDIT_PRODUCT = 'SHOW_EDIT_PRODUCT';\nexport const HIDE_EDIT_PRODUCT = 'HIDE_EDIT_PRODUCT';\n\n\nexport class ShowAddProductAction implements Action {\n readonly type = SHOW_ADD_PRODUCT;\n\n constructor() { }\n}\n\nexport class HideAddProductAction implements Action {\n  readonly type = HIDE_ADD_PRODUCT;\n\n  constructor() { }\n}\nexport class ShowEditProductAction implements Action {\n readonly type = SHOW_EDIT_PRODUCT;\n\n constructor() { }\n}\n\nexport class HideEditProductAction implements Action {\n  readonly type = HIDE_EDIT_PRODUCT;\n\n  constructor() { }\n}\n\nexport type Actions\n  =\n  | ShowAddProductAction\n  | HideAddProductAction\n  | ShowEditProductAction\n  | HideEditProductAction;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 21
            },
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "SHOW_EDIT_PRODUCT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateProduct",
            "id": "class-UpdateProduct-b8ed3482fa12a4e571b08c97e6b2af98",
            "file": "src/app/components/dashboard/products/store/product.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Product } from './product.model';\n\nexport enum ProductActionTypes {\n  LOAD_PRODUCTS = '[Product] Load Products',\n  LOAD_PRODUCTS_SUCCESS = '[Product] Load Products Success',\n  LOAD_PRODUCTS_FAIL = '[Product] Load Products Fail',\n  CREATE_PRODUCT = '[Product] Create Products',\n  CREATE_PRODUCT_SUCCESS = '[Product] Create Product Success',\n  CREATE_PRODUCT_FAIL = '[Product] Create Product Fail',\n  LOAD_PRODUCT = '[Product] Load Product',\n  LOAD_PRODUCT_SUCCESS = '[Product] Load Product Success',\n  LOAD_PRODUCT_FAIL = '[Product] Load Product Fail',\n  UPDATE_PRODUCT = '[Product] Update Product',\n  UPDATE_PRODUCT_SUCCESS = '[Product] Update Product Success',\n  UPDATE_PRODUCT_FAIL = '[Product] Update Product Fail',\n  DELETE_PRODUCT = '[Product] Delete Product',\n  DELETE_PRODUCT_SUCCESS = '[Product] Delete Product Success',\n  DELETE_PRODUCT_FAIL = '[Product] Delete Product Fail',\n\n}\n// get Products\nexport class LoadProducts implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS;\n}\nexport class LoadProductsSuccess implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS_SUCCESS;\n  constructor(public payload: Product[]) {}\n}\n\nexport class LoadProductsFail implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS_FAIL;\n  constructor(public payload: string) {}\n}\n// create Product\nexport class CreateProduct implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT;\n  constructor(public payload: Product) {}\n}\nexport class CreateProductSuccess implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class CreateProductFail implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// get Product by id\nexport class LoadProduct implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT;\n  constructor(public payload: number) {}\n}\nexport class LoadProductSuccess implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class LoadProductFail implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// update Product by id\nexport class UpdateProduct implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT;\n  constructor(public payload: Product) {}\n}\nexport class UpdateProductSuccess implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class UpdateProductFail implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// update Product by id\nexport class DeleteProduct implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT;\n  constructor(public payload: number) {}\n}\nexport class DeleteProductSuccess implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT_SUCCESS;\n  constructor(public payload: number) {}\n}\n\nexport class DeleteProductFail implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n\nexport type ProductAction =\n  | LoadProducts\n  | LoadProductsSuccess\n  | LoadProductsFail\n  | CreateProduct\n  | CreateProductSuccess\n  | CreateProductFail\n  | LoadProduct\n  | LoadProductSuccess\n  | LoadProductFail\n  | UpdateProduct\n  | UpdateProductSuccess\n  | UpdateProductFail\n  | DeleteProduct\n  | DeleteProductSuccess\n  | DeleteProductFail;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Product"
                    }
                ],
                "line": 67,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Product",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Product",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ProductActionTypes.UPDATE_PRODUCT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateProductFail",
            "id": "class-UpdateProductFail-b8ed3482fa12a4e571b08c97e6b2af98",
            "file": "src/app/components/dashboard/products/store/product.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Product } from './product.model';\n\nexport enum ProductActionTypes {\n  LOAD_PRODUCTS = '[Product] Load Products',\n  LOAD_PRODUCTS_SUCCESS = '[Product] Load Products Success',\n  LOAD_PRODUCTS_FAIL = '[Product] Load Products Fail',\n  CREATE_PRODUCT = '[Product] Create Products',\n  CREATE_PRODUCT_SUCCESS = '[Product] Create Product Success',\n  CREATE_PRODUCT_FAIL = '[Product] Create Product Fail',\n  LOAD_PRODUCT = '[Product] Load Product',\n  LOAD_PRODUCT_SUCCESS = '[Product] Load Product Success',\n  LOAD_PRODUCT_FAIL = '[Product] Load Product Fail',\n  UPDATE_PRODUCT = '[Product] Update Product',\n  UPDATE_PRODUCT_SUCCESS = '[Product] Update Product Success',\n  UPDATE_PRODUCT_FAIL = '[Product] Update Product Fail',\n  DELETE_PRODUCT = '[Product] Delete Product',\n  DELETE_PRODUCT_SUCCESS = '[Product] Delete Product Success',\n  DELETE_PRODUCT_FAIL = '[Product] Delete Product Fail',\n\n}\n// get Products\nexport class LoadProducts implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS;\n}\nexport class LoadProductsSuccess implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS_SUCCESS;\n  constructor(public payload: Product[]) {}\n}\n\nexport class LoadProductsFail implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS_FAIL;\n  constructor(public payload: string) {}\n}\n// create Product\nexport class CreateProduct implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT;\n  constructor(public payload: Product) {}\n}\nexport class CreateProductSuccess implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class CreateProductFail implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// get Product by id\nexport class LoadProduct implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT;\n  constructor(public payload: number) {}\n}\nexport class LoadProductSuccess implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class LoadProductFail implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// update Product by id\nexport class UpdateProduct implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT;\n  constructor(public payload: Product) {}\n}\nexport class UpdateProductSuccess implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class UpdateProductFail implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// update Product by id\nexport class DeleteProduct implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT;\n  constructor(public payload: number) {}\n}\nexport class DeleteProductSuccess implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT_SUCCESS;\n  constructor(public payload: number) {}\n}\n\nexport class DeleteProductFail implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n\nexport type ProductAction =\n  | LoadProducts\n  | LoadProductsSuccess\n  | LoadProductsFail\n  | CreateProduct\n  | CreateProductSuccess\n  | CreateProductFail\n  | LoadProduct\n  | LoadProductSuccess\n  | LoadProductFail\n  | UpdateProduct\n  | UpdateProductSuccess\n  | UpdateProductFail\n  | DeleteProduct\n  | DeleteProductSuccess\n  | DeleteProductFail;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string"
                    }
                ],
                "line": 76,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ProductActionTypes.UPDATE_PRODUCT_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateProductSuccess",
            "id": "class-UpdateProductSuccess-b8ed3482fa12a4e571b08c97e6b2af98",
            "file": "src/app/components/dashboard/products/store/product.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Product } from './product.model';\n\nexport enum ProductActionTypes {\n  LOAD_PRODUCTS = '[Product] Load Products',\n  LOAD_PRODUCTS_SUCCESS = '[Product] Load Products Success',\n  LOAD_PRODUCTS_FAIL = '[Product] Load Products Fail',\n  CREATE_PRODUCT = '[Product] Create Products',\n  CREATE_PRODUCT_SUCCESS = '[Product] Create Product Success',\n  CREATE_PRODUCT_FAIL = '[Product] Create Product Fail',\n  LOAD_PRODUCT = '[Product] Load Product',\n  LOAD_PRODUCT_SUCCESS = '[Product] Load Product Success',\n  LOAD_PRODUCT_FAIL = '[Product] Load Product Fail',\n  UPDATE_PRODUCT = '[Product] Update Product',\n  UPDATE_PRODUCT_SUCCESS = '[Product] Update Product Success',\n  UPDATE_PRODUCT_FAIL = '[Product] Update Product Fail',\n  DELETE_PRODUCT = '[Product] Delete Product',\n  DELETE_PRODUCT_SUCCESS = '[Product] Delete Product Success',\n  DELETE_PRODUCT_FAIL = '[Product] Delete Product Fail',\n\n}\n// get Products\nexport class LoadProducts implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS;\n}\nexport class LoadProductsSuccess implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS_SUCCESS;\n  constructor(public payload: Product[]) {}\n}\n\nexport class LoadProductsFail implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCTS_FAIL;\n  constructor(public payload: string) {}\n}\n// create Product\nexport class CreateProduct implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT;\n  constructor(public payload: Product) {}\n}\nexport class CreateProductSuccess implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class CreateProductFail implements Action {\n  readonly type = ProductActionTypes.CREATE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// get Product by id\nexport class LoadProduct implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT;\n  constructor(public payload: number) {}\n}\nexport class LoadProductSuccess implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class LoadProductFail implements Action {\n  readonly type = ProductActionTypes.LOAD_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// update Product by id\nexport class UpdateProduct implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT;\n  constructor(public payload: Product) {}\n}\nexport class UpdateProductSuccess implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {}\n}\n\nexport class UpdateProductFail implements Action {\n  readonly type = ProductActionTypes.UPDATE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n// update Product by id\nexport class DeleteProduct implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT;\n  constructor(public payload: number) {}\n}\nexport class DeleteProductSuccess implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT_SUCCESS;\n  constructor(public payload: number) {}\n}\n\nexport class DeleteProductFail implements Action {\n  readonly type = ProductActionTypes.DELETE_PRODUCT_FAIL;\n  constructor(public payload: string) {}\n}\n\n\nexport type ProductAction =\n  | LoadProducts\n  | LoadProductsSuccess\n  | LoadProductsFail\n  | CreateProduct\n  | CreateProductSuccess\n  | CreateProductFail\n  | LoadProduct\n  | LoadProductSuccess\n  | LoadProductFail\n  | UpdateProduct\n  | UpdateProductSuccess\n  | UpdateProductFail\n  | DeleteProduct\n  | DeleteProductSuccess\n  | DeleteProductFail;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Product"
                    }
                ],
                "line": 71,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Product",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Product",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ProductActionTypes.UPDATE_PRODUCT_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AddProductComponent",
            "id": "component-AddProductComponent-d1b6f27a4fd7045f2011355df49e745c",
            "file": "src/app/components/dashboard/products/add-product/add-product.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-product",
            "styleUrls": [
                "./add-product.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-product.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "mode",
                    "line": 14
                }
            ],
            "outputsClass": [
                {
                    "name": "newItemEvent",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "addProductForm",
                    "defaultValue": "new FormGroup({\n    heading: new FormControl(),\n    description: new FormControl(),\n    imageUrl: new FormControl(),\n    // id: new FormControl(),\n  })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "hidePopup",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "addProduct",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "Cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { Output, EventEmitter } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport * as ProductActions from '../store/product.action';\nimport * as FoodieProductActions from '../../../store/action';\n@Component({\n  selector: 'app-add-product',\n  templateUrl: './add-product.component.html',\n  styleUrls: ['./add-product.component.scss'],\n})\nexport class AddProductComponent implements OnInit {\n  @Output() newItemEvent = new EventEmitter<any>();\n  @Input() mode;\n  hidePopup: boolean;\n  constructor(private store: Store<any>) {}\n\n  addProductForm = new FormGroup({\n    heading: new FormControl(),\n    description: new FormControl(),\n    imageUrl: new FormControl(),\n    // id: new FormControl(),\n  });\n\n  ngOnInit(): void {}\n  public addProduct(): void {\n    this.store.dispatch(\n      new ProductActions.CreateProduct(this.addProductForm.value)\n    );\n    this.store.dispatch(new FoodieProductActions.HideAddProductAction());\n  }\n\n  public Cancel(): void {\n    this.store.dispatch(new FoodieProductActions.HideAddProductAction());\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".heading {\n\th3 {\n\t\tcolor: var(--text-color);\n\t}\n}\n.btn-wrapper {\n\tdisplay: flex;\n\twidth: 100%;\n\tjustify-content: space-between;\n}\n",
                    "styleUrl": "./add-product.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<any>"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-wrapper\">\n  <div class=\"modal-body\">\n    <header class=\"heading\">\n      <h1>Add Product</h1>\n    </header>\n    <form [formGroup]=\"addProductForm\">\n      <div class=\"input-wrapper\">\n        <label for=\"heading\">heading</label>\n        <input\n          type=\"text\"\n          placeholder=\"Enter Heading\"\n          formControlName=\"heading\"\n          aria-label=\"Enter Heading\"\n        />\n      </div>\n      <div class=\"input-wrapper\">\n        <label for=\"description\">description</label>\n        <input\n          type=\"text\"\n          placeholder=\"Enter description\"\n          formControlName=\"description\"\n          aria-label=\"Enter description\"\n        />\n      </div>\n      <div class=\"input-wrapper\">\n        <label for=\"imageUrl\">imageUrl</label>\n        <input\n          type=\"text\"\n          placeholder=\"Enter imageUrl\"\n          formControlName=\"imageUrl\"\n          aria-label=\"Enter imageUrl\"\n        />\n      </div>\n    </form>\n    <div class=\"btn-wrapper\">\n      <foodie-button title=\"Add Product\" (click)=\"addProduct()\" tabindex=\"0\" aria-label=\"Add Product\"></foodie-button>\n      <foodie-button title=\"Cancel\" (click)=\"Cancel()\" aria-label=\"Cancel\"></foodie-button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-9140b8f3b8fe9374ff216e517541f264",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'app-root'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'app-root';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<router-outlet></router-outlet>\n"
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-61059899013510a395900a0539491a5f",
            "file": "src/app/components/dashboard/products/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card",
            "styleUrls": [
                "./card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "product",
                    "line": 13
                }
            ],
            "outputsClass": [
                {
                    "name": "newItemEvent",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 11,
                    "type": "EventEmitter"
                },
                {
                    "name": "newItemEventId",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "deleteProduct",
                    "args": [
                        {
                            "name": "id",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "edit",
                    "args": [
                        {
                            "name": "id",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport * as ProductActions from '../store/product.action';\nimport * as productEditActions from '../../../store/action';\n@Component({\n  selector: 'app-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.scss']\n})\nexport class CardComponent {\n  @Output() newItemEvent = new EventEmitter<any>();\n  @Output() newItemEventId = new EventEmitter<any>();\n  @Input() product;\n\n  constructor(private store: Store<any>) {}\n\n  deleteProduct(id): void{\n    this.store.dispatch(new ProductActions.DeleteProduct(id));\n  }\n  edit(id): void {\n    this.newItemEventId.emit(id);\n    this.store.dispatch(new productEditActions.ShowEditProductAction());\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n.card {\n  width: 100%;\n  background-color: var(--white);\n\n  .class-wrapper{\n    border:1px solid grey;\n    border-radius: 5px;\n    margin: 0px 10px;\n    img {\n      width: 100%;\n      height: 200px;\n      object-fit: cover;\n      border-radius: 5px 5px 0 0;\n    }\n\n    .info{\n      padding: 1em 1.5em 2em;\n      min-height: 160px;\n      max-height: 160px;\n      color: var(--text-color);\n      p{\n        margin-top: 1em;\n      }\n    }\n    .btn-wrapper{\n      display: flex;\n      width: 100%;\n      justify-content: flex-end;\n      padding: 0 0 2rem;\n      foodie-button{\n        margin: 0 2rem;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<any>"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"card\">\n  <div class=\"class-wrapper\">\n    <img src=\"{{product.imageUrl}}\" alt=\"card image\" />\n    <div class=\"info\">\n      <h1>{{ product.heading }}</h1>\n      <p>\n        {{ product.description }}\n      </p>\n    </div>\n    <div class=\"btn-wrapper\">\n      <foodie-button  title=\"Edit\" (click)=\"edit(product.id)\" aria-label=\"Edit\"></foodie-button >\n      <foodie-button  title=\"Delete\" (click)=\"deleteProduct(product.id)\" aria-label=\"Delete\"></foodie-button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-74c95e9560489c0db9d25e5c465dddb0",
            "file": "src/app/components/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard",
            "styleUrls": [
                "./dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addProductFormView",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "editProductFormView",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "products",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "products$",
                    "type": "Observable<Product[]>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "showAddProductPopUp",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "addProductPopUp",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editProduct",
                    "args": [
                        {
                            "name": "id",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProducts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "hideAddProductPopUp",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport * as ProductActions from '../dashboard/products/store/product.action';\nimport * as fromProduct from '../dashboard/products/store/products.reducer';\nimport { Product } from './products/store/product.model';\n\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss'],\n})\nexport class DashboardComponent implements OnInit {\n  id: number;\n  products: any;\n  showAddProductPopUp: boolean;\n  addProductFormView: any;\n  editProductFormView: any;\n  products$: Observable<Product[]>;\n\n  constructor(private store: Store<any>) {\n    this.getProducts();\n  }\n\n  ngOnInit(): void {\n    this.store.subscribe((state) => {\n      this.addProductFormView = state.productView.addProductFormView;\n      this.editProductFormView = state.productView.editProductFormView;\n    });\n  }\n\n  addProductPopUp(value): void {\n    this.showAddProductPopUp = value;\n  }\n\n  hideAddProductPopUp(value): void{\n    this.showAddProductPopUp = value;\n  }\n\n  getProducts(): void {\n    this.store.dispatch(new ProductActions.LoadProducts());\n    this.products$ = this.store.pipe(select(fromProduct.getProducts));\n  }\n\n  editProduct(id): void {\n    this.id = id;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper{\n  display: grid;\n  .wrapper-section{\n    padding: 30px;\n    .container{\n      width: 100%;\n      display: inline-grid;\n      grid-template-columns: auto auto auto auto;\n      grid-row-gap: 20px;\n\n      .item-container{\n        height: 400px;\n        width: 40%;\n      }\n    }\n  }\n}\n\n",
                    "styleUrl": "./dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<any>"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"wrapper\"  (hideAddProductView)=\"hideAddProductPopUp($event)\">\n  <app-header (addProductView)=\"addProductPopUp($event)\"></app-header>\n  <div class=\"wrapper-section\">\n    <main>\n      <app-add-product *ngIf=\"addProductFormView\"></app-add-product>\n      <app-edit-product id={{id}} *ngIf=\"editProductFormView\"></app-edit-product>\n      <div class=\"container\">\n        <ng-container class=\"item-container\" *ngFor=\"let item of (products$ |async )\">\n          <app-card\n            [product]=\"item\"\n            (newItemEventId)=\"editProduct($event)\">\n          </app-card>\n          <app-edit-products id={{item.id}}></app-edit-products>\n        </ng-container>\n      </div>\n    </main>\n  </div>\n</div>\n\n"
        },
        {
            "name": "EditProductsComponent",
            "id": "component-EditProductsComponent-054e278e6f9198bb9028268cf57740d3",
            "file": "src/app/components/dashboard/products/edit-products/edit-products.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-product",
            "styleUrls": [
                "./edit-products.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-products.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "id",
                    "line": 15
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "editProductForm",
                    "defaultValue": "new FormGroup({\n    heading: new FormControl(),\n    description: new FormControl(),\n    imageUrl: new FormControl(),\n    id: new FormControl(),\n  })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "Cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46
                },
                {
                    "name": "editProduct",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "getProductById",
                    "args": [
                        {
                            "name": "id",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { Store, select } from '@ngrx/store';\nimport * as ProductActions from '../store/product.action';\nimport * as fromProduct from '../store/products.reducer';\nimport { Observable } from 'rxjs';\nimport * as editProductActions from '../../../store/action';\n\n@Component({\n  selector: 'app-edit-product',\n  templateUrl: './edit-products.component.html',\n  styleUrls: ['./edit-products.component.scss'],\n})\nexport class EditProductsComponent implements OnInit {\n  @Input() id;\n  constructor(private store: Store<any>) {}\n\n  editProductForm = new FormGroup({\n    heading: new FormControl(),\n    description: new FormControl(),\n    imageUrl: new FormControl(),\n    id: new FormControl(),\n  });\n\n  ngOnInit(): void {\n    this.getProductById(this.id);\n  }\n\n  getProductById(id): void {\n    this.store.dispatch(new ProductActions.LoadProduct(id));\n    const product$: Observable<any> = this.store.pipe(\n      select(fromProduct.getProductById)\n      );\n    product$.subscribe((formData) => {\n    if (formData) {\n        this.editProductForm.patchValue(formData);\n      }\n    });\n  }\n\n  editProduct(): void {\n    this.store.dispatch(new ProductActions.UpdateProduct(this.editProductForm.value));\n    this.store.dispatch(new editProductActions.HideEditProductAction());\n  }\n\n  Cancel(): void {\n    this.store.dispatch(new editProductActions.HideEditProductAction());\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".heading {\n\th3 {\n\t\tcolor: var(--text-color);\n\t}\n}\n.btn-wrapper {\n\tdisplay: flex;\n\twidth: 100%;\n\tjustify-content: space-between;\n}\n",
                    "styleUrl": "./edit-products.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<any>"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-wrapper\">\n  <div class=\"modal-body\">\n    <header class=\"heading\">\n        <h1>Edit Product</h1>\n    </header>\n    <form [formGroup]=\"editProductForm\">\n      <!-- <div class=\"input-wrapper\">\n          <label for=\"id\">id</label>\n          <input type=\"text\" placeholder=\"Enter unique id\" formControlName=\"id\" aria-label=\"Edit Id\">\n      </div> -->\n      <div class=\"input-wrapper\">\n          <label for=\"heading\">heading</label>\n          <input type=\"text\" placeholder=\"Enter Heading\" formControlName=\"heading\" aria-label=\"Edit heading\">\n      </div>\n      <div class=\"input-wrapper\">\n          <label for=\"description\">description</label>\n          <input type=\"text\" placeholder=\"Enter description\" formControlName=\"description\" aria-label=\"Edit description\">\n      </div>\n      <div class=\"input-wrapper\">\n          <label for=\"imageUrl\">imageUrl</label>\n          <input type=\"text\" placeholder=\"Enter imageUrl\" formControlName=\"imageUrl\" aria-label=\"Edit imageUrl\">\n      </div>\n    </form>\n    <div class=\"btn-wrapper\">\n      <foodie-button  title = \"Edit Product\" (click)= \"editProduct()\" aria-label=\"Edit Product\"></foodie-button >\n      <foodie-button  title = \"Cancel\" (click)= \"Cancel()\" aria-label=\"Cancel\"></foodie-button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-7d424e5a18aee91b3b869898ec0e1fa1",
            "file": "src/app/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "addProductView",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "showAddProductView",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "theme",
                    "defaultValue": "'SetTheme'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "addProduct",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44
                },
                {
                    "name": "changeTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48
                },
                {
                    "name": "setTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Output } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { AuthService } from 'src/app/auth.service';\nimport { ThemeService } from 'src/app/services/theme/theme.service';\nimport * as ProductActions from '../store/action';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss'],\n})\nexport class HeaderComponent {\n  @Output() addProductView = new EventEmitter<any>();\n  theme = 'SetTheme';\n  showAddProductView: boolean;\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private themeService: ThemeService,\n    private store: Store<any>\n  ) {\n    this.themeService.isDarkTheme();\n  }\n\n  setTheme(): void {\n    if (this.themeService.isDarkTheme()) {\n      this.theme = 'light Theme';\n    } else {\n      this.theme = 'Dark theme';\n    }\n  }\n\n  changeTheme(): void {\n    if (this.themeService.isDarkTheme()) {\n      this.themeService.setLightTheme();\n    } else {\n      this.themeService.setDarkTheme();\n    }\n\n    this.setTheme();\n  }\n\n  addProduct(): void {\n    this.store.dispatch(new ProductActions.ShowAddProductAction());\n  }\n\n  logout(): void {\n    this.authService.logout();\n    this.router.navigateByUrl('/login');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".header{\n    padding: 0.6250em;\n    border: 1px solid #c1b9b9;\n    background:  var(--background-tertiary);\n    color: var(--foreground-quaternary);\n    display: grid;\n    grid-template-columns: 75% 25%;\n\n    h1{\n      text-align: center;\n      margin: 0 0.625em;\n    }\n    button{\n      background: transparent;\n      border-color: transparent;\n      cursor: pointer;\n      float: right;\n      img{\n        background-color: #1c5069;\n        border-radius: 50%;\n        width: 25px;\n        height: 25px;\n      }\n    }\n    // css for desktop view\n    @media (min-width: 1100px) {\n      h1{\n        padding-left: 275px;\n      }\n    }\n  }\n  // css for tab view\n  @media only screen and (min-width: 600px) and (max-width: 1100px){\n    .header{\n      grid-template-columns: 65% 35%;\n      h1{\n        padding-left: 200px;\n      }\n    }\n  }\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "themeService",
                        "type": "ThemeService"
                    },
                    {
                        "name": "store",
                        "type": "Store<any>"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<header>\n  <div class=\"header\">\n    <h1>Welcome Foodies ...!</h1>\n    <div>\n      <foodie-button title=\"Add Product\" (click)=\"addProduct()\" aria-label=\"Add Product\"></foodie-button>\n      <foodie-button [title]=\"theme\" (click)='changeTheme()' aria-label=\"Theme\"></foodie-button>\n      <button (click)=\"logout()\" title= \"logout\">\n        <img src='../../assets/images/logout.png' alt=\"logout\">\n      </button>\n    </div>\n  </div>\n</header>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-dac4e216e8cd9d772d81c854166bc8ca",
            "file": "src/app/components/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "isSubmitted",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/auth.service';\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent implements OnInit {\n  authForm: FormGroup;\n  isSubmitted = false;\n\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private formBuilder: FormBuilder\n  ) {}\n\n  ngOnInit(): void {\n    this.authForm = this.formBuilder.group({\n      email: ['', Validators.required],\n      password: ['', Validators.required],\n    });\n  }\n\n  // tslint:disable-next-line: typedef\n  get formControls() {\n    return this.authForm.controls;\n  }\n\n  // tslint:disable-next-line: typedef\n  onSubmit() {\n    this.isSubmitted = true;\n    if (this.authForm.invalid){\n      return;\n    }\n    this.authService.signIn(this.authForm.value);\n    this.router.navigateByUrl('/dashboard');\n\n    /* this.httpService\n      .postLogin(environment.login, this.authForm.value)\n      .subscribe((data) => {\n        console.log(data);\n        sessionStorage.setItem('token', data.access_token);\n        this.router.navigateByUrl('/dashboard');\n      }); */\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n.login-wrapper{\n  display: grid;\n  margin: auto;\n\n  .login {\n    width: 400px;\n    height: 450px;\n    margin: 4em auto;\n    padding: 2em 1.5em;\n    font-size: 1.40rem;\n    border-radius: 4px;\n    background: #4f7588;\n\n    .top-space{\n      margin: 15px 0px;\n    }\n\n    .submit-btn{\n      margin: 2.5em auto;\n    }\n\n    .header {\n      padding: 15px 10px;\n      font-size: 1.4em;\n      font-weight: normal;\n      text-align: center;\n      text-transform: uppercase;\n      color: #fff;\n      .container {\n        background: #ebebeb;\n        padding: 12px;\n      }\n    }\n    .register-link{\n      float:right;\n      a{\n        color:#fff;\n      }\n    }\n\n    input {\n      box-sizing: border-box;\n      display: block;\n      width: 100%;\n      border-width: 1px;\n      border-style: solid;\n      padding: 10px;\n      outline: 0;\n      font-family: inherit;\n      font-size: 0.95em;\n    }\n\n    input[type=\"email\"],\n    input[type=\"password\"] {\n      background: #fff;\n      border-color: #bbb;\n      color: #555;\n      &:focus{\n        border-color: #888;\n      }\n    }\n\n    input[type=\"submit\"] {\n      background: rgb(1, 29, 51);\n      border-color: transparent;\n      color: #fff;\n      cursor: pointer;\n    }\n\n    input[type=\"submit\"]:hover {\n      background: #3d6486;\n    }\n\n    input[type=\"submit\"]:focus {\n      border-color: #05a;\n    }\n\n    .error-block{\n      color: rgb(230, 14, 14);\n      margin: 5px 0px;\n      font-size: 12px;\n    }\n\n    .has-error input[type=\"email\"],\n    .has-error input[type=\"password\"] {\n        border:2px solid rgb(216, 12, 12);\n        color: rgb(230, 14, 14);\n    }\n  }\n}\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "formControls": {
                    "name": "formControls",
                    "getSignature": {
                        "name": "formControls",
                        "type": "",
                        "returnType": "",
                        "line": 30
                    }
                }
            },
            "templateData": "<div class=\"login-wrapper\">\n  <div class=\"login\">\n    <header>\n      <h1 class=\"header login-margin\">Log in</h1>\n    </header>\n    <main>\n      <form [formGroup]=\"authForm\" class=\"container\" (ngSubmit)=\"onSubmit()\">\n        <div class=\"top-space\">\n          <div [ngClass]=\"{ 'has-error': isSubmitted && formControls.email.errors }\">\n            <input type=\"email\" placeholder=\"Email\" formControlName=\"email\" aria-label=\"Enter Email\">\n          </div>\n          <div *ngIf=\"isSubmitted && formControls.email.errors\" class=\"error-block\">\n            <div *ngIf=\"formControls.email.errors.required\">Email is required</div>\n          </div>\n        </div>\n        <div class=\"top-space\">\n          <div [ngClass]=\"{ 'has-error': isSubmitted && formControls.password.errors }\">\n            <input type=\"password\" placeholder=\"Password\" formControlName=\"password\" aria-label=\"Enter Password\">\n          </div>\n          <div *ngIf=\"isSubmitted && formControls.password.errors\" class=\"error-block\">\n            <div *ngIf=\"formControls.password.errors.required\">Password is required</div>\n          </div>\n        </div>\n        <div class=\"submit-btn\">\n          <input type=\"submit\" value=\"Log in\" aria-label=\"submit\">\n        </div>\n        <div class=\"register-link\">\n            <a routerLink=\"/register\" class=\"btn btn-link\">New user? Click here to Register</a>\n        </div>\n      </form>\n    </main>\n  </div>\n</div>\n"
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-0038212f84ece1f2482da8c21b3b32cd",
            "file": "src/app/components/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./register.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "register.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "isSubmitted",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from 'src/app/auth.service';\n\n@Component({\n  templateUrl: 'register.component.html',\n  styleUrls: ['./register.component.scss'],\n})\nexport class RegisterComponent implements OnInit {\n  authForm: FormGroup;\n  isSubmitted = false;\n\n  constructor(\n    private authService: AuthService,\n    private formBuilder: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    this.authForm = this.formBuilder.group({\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', Validators.required],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n    });\n  }\n\n  // tslint:disable-next-line: typedef\n  get formControls() {\n    return this.authForm.controls;\n  }\n\n  // tslint:disable-next-line: typedef\n  onSubmit() {\n    this.isSubmitted = true;\n    if (!this.authForm.invalid) {\n      this.authService.register(this.authForm.value);\n      this.router.navigateByUrl('/dashboard');\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n.register-wrapper{\n  display: grid;\n  margin: auto;\n\n  .register {\n    width: 400px;\n    height: 450px;\n    border-radius: 4px;\n    margin: 1em auto;\n    padding: 1em 1.5em;\n    font-size: 1.40rem;\n    position: relative;\n    background: #4f7588;\n\n    .top-space{\n      margin: 15px 0px;\n    }\n\n    .submit-btn{\n      margin: 3em auto;\n    }\n\n    .header {\n      padding: 10px 10px;\n      font-size: 1.4em;\n      font-weight: normal;\n      text-align: center;\n      text-transform: uppercase;\n      color: #fff;\n      .container {\n        background: #ebebeb;\n        padding: 12px;\n      }\n    }\n\n    .btn-box{\n      display:inline-grid;\n      grid-template-columns: auto auto auto;\n      float: right;\n      position: absolute;\n      bottom: 35px;\n      right: 20px;\n      foodie-button{\n        border:none !important;\n      }\n      a{\n        text-decoration: none;\n        color:#fff;\n      }\n      .btn{\n        padding: 4px 12px;\n        font-size: 1.5rem;\n        margin: 0px 5px;\n        color:#fff;\n        border: none;\n        background-color: #1c5069;\n      }\n    }\n\n    input {\n      box-sizing: border-box;\n      display: block;\n      width: 100%;\n      border-width: 1px;\n      border-style: solid;\n      padding: 10px;\n      outline: 0;\n      font-family: inherit;\n      font-size: 0.95em;\n    }\n\n    input[type=\"firstName\"],\n    input[type=\"lastName\"],\n    input[type=\"email\"],\n    input[type=\"password\"] {\n      background: #fff;\n      border-color: #bbb;\n      color: #555;\n      &:focus{\n        border-color: #888;\n      }\n    }\n\n    input[type=\"submit\"] {\n      background: rgb(1, 29, 51);\n      border-color: transparent;\n      color: #fff;\n      cursor: pointer;\n    }\n\n    input[type=\"submit\"]:hover {\n      background: #3d6486;\n    }\n\n    input[type=\"submit\"]:focus {\n      border-color: #05a;\n    }\n\n    .error-block{\n      color: rgb(230, 14, 14);\n      font-size: 12px;\n      margin: 0px;\n    }\n\n    .has-error input[type=\"firstName\"],\n    .has-error input[type=\"lastName\"],\n    .has-error input[type=\"email\"]\n    .has-error input[type=\"password\"] {\n        border:2px solid rgb(216, 12, 12);\n        color: rgb(230, 14, 14);\n    }\n  }\n}\n",
                    "styleUrl": "./register.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "formControls": {
                    "name": "formControls",
                    "getSignature": {
                        "name": "formControls",
                        "type": "",
                        "returnType": "",
                        "line": 31
                    }
                }
            },
            "templateData": "<div class=\"register-wrapper\">\n  <div class=\"register\">\n    <header>\n      <h1 class=\"header rgt-margin\">Register</h1>\n    </header>\n    <main class=\"card-body\">\n        <form [formGroup]=\"authForm\" class=\"container\" (ngSubmit)=\"onSubmit()\">\n          <div class=\"top-space\">\n            <div [ngClass]=\"{ 'has-error': isSubmitted && formControls.firstName.errors }\">\n              <input type=\"text\" placeholder=\"firstName\" formControlName=\"firstName\" aria-label=\"Enter First Name\">\n            </div>\n            <div *ngIf=\"isSubmitted && formControls.firstName.errors\" class=\"error-block\">\n              <div *ngIf=\"formControls.firstName.errors.required\">First Name is required</div>\n            </div>\n          </div>\n          <div class=\"top-space\">\n            <div [ngClass]=\"{ 'has-error': isSubmitted && formControls.lastName.errors }\">\n              <input type=\"text\" placeholder=\"lastName\" formControlName=\"lastName\" aria-label=\"Enter Last Name\">\n            </div>\n            <div *ngIf=\"isSubmitted && formControls.lastName.errors\" class=\"error-block\">\n              <div *ngIf=\"formControls.lastName.errors.required\">Last Name is required</div>\n            </div>\n          </div>\n          <div class=\"form-group top-space\">\n            <div [ngClass]=\"{ 'has-error': isSubmitted && formControls.email.errors }\">\n              <input type=\"email\" placeholder=\"email\" formControlName=\"email\" aria-label=\"Enter Email\">\n            </div>\n            <div *ngIf=\"isSubmitted && formControls.email.errors\" class=\"error-block\">\n              <div *ngIf=\"formControls.email.errors.required\">User Name is required</div>\n            </div>\n          </div>\n          <div class=\"top-space\">\n            <div [ngClass]=\"{ 'has-error': isSubmitted && formControls.password.errors }\">\n              <input type=\"password\" placeholder=\"Password\" formControlName=\"password\" aria-label=\"Enter Password\">\n            </div>\n            <div *ngIf=\"isSubmitted && formControls.password.errors\" class=\"error-block\">\n              <div *ngIf=\"formControls.password.errors.required\">Password is required</div>\n            </div>\n          </div>\n          <div class=\"btn-box\">\n            <button class=\"btn\" aria-label=\"Register\" (click)=\"onSubmit()\">Register</button>\n            <div class=\"btn\">\n              <a routerLink=\"/login\" class=\"btn-link\" aria-label=\"Cancel\" role=\"button\">Cancel</a>\n            </div>\n          </div>\n        </form>\n      </main>\n  </div>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddProductComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "CardComponent"
                        },
                        {
                            "name": "DashboardComponent"
                        },
                        {
                            "name": "EditProductsComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "RegisterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ThemeModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "addProduct",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/add-product.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "addProduct",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/edit-product.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "addProductView",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "card",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/card.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "dark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/theme/theme.ts",
                "type": "Theme",
                "defaultValue": "{\n  name: 'dark',\n  properties: {\n    '--foreground-default': '#5C7D99',\n    '--foreground-secondary': '#A3B9CC',\n    '--foreground-tertiary': '#F4FAFF',\n    '--foreground-quaternary': '#E5E5E5',\n    '--foreground-light': '#FFFFFF',\n\n    '--background-default': '#797C80',\n    '--background-secondary': '#41474D',\n    '--background-tertiary': '#1c5069',\n    '--background-light': '#41474D',\n\n    '--primary-default': '#5DFDCB',\n    '--primary-dark': '#24B286',\n    '--primary-light': '#f3efef',\n\n    '--error-default': '#EF3E36',\n    '--error-dark': '#800600',\n    '--error-light': '#FFCECC',\n\n    '--background-tertiary-shadow': '0 1px 3px 0 rgba(8, 9, 10, 0.5)',\n  },\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  login: serverBaseUrl + '/auth/login',\n  register: serverBaseUrl + '/auth/register',\n  getProducts: serverBaseUrl + '/products',\n  addProducts: serverBaseUrl + '/products',\n  deleteProducts: serverBaseUrl + '/products/{id}',\n  getProductsById: serverBaseUrl + '/products/{id}',\n  editProductsBy: serverBaseUrl + '/products/{id}',\n}"
            },
            {
                "name": "getError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/dashboard/products/store/products.reducer.ts",
                "type": "",
                "defaultValue": "createSelector(\n  getProductFeatureState,\n  (state: ProductState) => state.error\n)"
            },
            {
                "name": "getProductById",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/dashboard/products/store/products.reducer.ts",
                "type": "",
                "defaultValue": "createSelector(\n  getProductFeatureState,\n  (state: ProductState) => state.selectedProduct\n)"
            },
            {
                "name": "getProductFeatureState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/dashboard/products/store/products.reducer.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<ProductState>('product')"
            },
            {
                "name": "getProducts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/dashboard/products/store/products.reducer.ts",
                "type": "",
                "defaultValue": "createSelector(\n  getProductFeatureState,\n  (state: ProductState) => state.products\n)"
            },
            {
                "name": "HIDE_ADD_PRODUCT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/store/action.ts",
                "type": "string",
                "defaultValue": "'HIDE_ADD_PRODUCT'"
            },
            {
                "name": "HIDE_EDIT_PRODUCT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/store/action.ts",
                "type": "string",
                "defaultValue": "'HIDE_EDIT_PRODUCT'"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/store/reducer.ts",
                "type": "State",
                "defaultValue": "{\n    addProductFormView : false,\n    editProductFormView : false,\n  }"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/dashboard/products/store/products.reducer.ts",
                "type": "ProductState",
                "defaultValue": "{\n  products: [],\n  loading: false,\n  loaded: false,\n  error: ' ',\n  productId: null,\n  selectedProduct: null,\n}"
            },
            {
                "name": "light",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/theme/theme.ts",
                "type": "Theme",
                "defaultValue": "{\n  name: 'light',\n  properties: {\n    '--foreground-default': '#3d4852',\n    '--foreground-secondary': '#41474D',\n    '--foreground-tertiary': '#797C80',\n    '--foreground-quaternary': '#F4FAFF',\n    '--foreground-light': '#41474D',\n\n    '--background-default': '#F4FAFF',\n    '--background-secondary': '#A3B9CC',\n    '--background-tertiary': '#aaadaf',\n    '--background-light': '#FFFFFF',\n\n    '--primary-default': '#5DFDCB',\n    '--primary-dark': '#24B286',\n    '--primary-light': '#f5fbf9',\n\n    '--error-default': '#EF3E36',\n    '--error-dark': '#800600',\n    '--error-light': '#FFCECC',\n\n    '--background-tertiary-shadow': '0 1px 3px 0 rgba(92, 125, 153, 0.5)',\n  },\n}"
            },
            {
                "name": "newItemEvent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/card.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "newItemEventId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/card.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "serverBaseUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "string",
                "defaultValue": "'http://localhost:8000'"
            },
            {
                "name": "SHOW_ADD_PRODUCT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/store/action.ts",
                "type": "string",
                "defaultValue": "'SHOW_ADD_PRODUCT'"
            },
            {
                "name": "SHOW_EDIT_PRODUCT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/store/action.ts",
                "type": "string",
                "defaultValue": "'SHOW_EDIT_PRODUCT'"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/dashboard.stories.ts",
                "type": "Story<DashboardComponent>",
                "defaultValue": "(args: DashboardComponent) => ({\n  component: DashboardComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/card.stories.ts",
                "type": "Story<CardComponent>",
                "defaultValue": "(args: CardComponent) => ({\n    component: CardComponent,\n    props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/edit-product.stories.ts",
                "type": "Story<EditProductsComponent>",
                "defaultValue": "(args: EditProductsComponent) => ({\n  component: EditProductsComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/header.stories.ts",
                "type": "Story<HeaderComponent>",
                "defaultValue": "(args: HeaderComponent) => ({\n  component: HeaderComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/register.stories.ts",
                "type": "Story<RegisterComponent>",
                "defaultValue": "(args: RegisterComponent) => ({\n  component: RegisterComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/add-product.stories.ts",
                "type": "Story<AddProductComponent>",
                "defaultValue": "(args: AddProductComponent) => ({\n  component: AddProductComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/login.stories.ts",
                "type": "Story<LoginComponent>",
                "defaultValue": "(args: LoginComponent) => ({\n  component: LoginComponent,\n  props: args,\n})"
            }
        ],
        "functions": [
            {
                "name": "productReducer",
                "file": "src/app/components/dashboard/products/store/products.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "ProductState",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/components/store/reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "Actions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ShowAddProductAction | HideAddProductAction | ShowEditProductAction | HideEditProductAction",
                "file": "src/app/components/store/action.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "ProductAction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "LoadProducts | LoadProductsSuccess | LoadProductsFail | CreateProduct | CreateProductSuccess | CreateProductFail | LoadProduct | LoadProductSuccess | LoadProductFail | UpdateProduct | UpdateProductSuccess | UpdateProductFail | DeleteProduct | DeleteProductSuccess | DeleteProductFail",
                "file": "src/app/components/dashboard/products/store/product.action.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [
            {
                "name": "ProductActionTypes",
                "childs": [
                    {
                        "name": "LOAD_PRODUCTS",
                        "value": "[Product] Load Products"
                    },
                    {
                        "name": "LOAD_PRODUCTS_SUCCESS",
                        "value": "[Product] Load Products Success"
                    },
                    {
                        "name": "LOAD_PRODUCTS_FAIL",
                        "value": "[Product] Load Products Fail"
                    },
                    {
                        "name": "CREATE_PRODUCT",
                        "value": "[Product] Create Products"
                    },
                    {
                        "name": "CREATE_PRODUCT_SUCCESS",
                        "value": "[Product] Create Product Success"
                    },
                    {
                        "name": "CREATE_PRODUCT_FAIL",
                        "value": "[Product] Create Product Fail"
                    },
                    {
                        "name": "LOAD_PRODUCT",
                        "value": "[Product] Load Product"
                    },
                    {
                        "name": "LOAD_PRODUCT_SUCCESS",
                        "value": "[Product] Load Product Success"
                    },
                    {
                        "name": "LOAD_PRODUCT_FAIL",
                        "value": "[Product] Load Product Fail"
                    },
                    {
                        "name": "UPDATE_PRODUCT",
                        "value": "[Product] Update Product"
                    },
                    {
                        "name": "UPDATE_PRODUCT_SUCCESS",
                        "value": "[Product] Update Product Success"
                    },
                    {
                        "name": "UPDATE_PRODUCT_FAIL",
                        "value": "[Product] Update Product Fail"
                    },
                    {
                        "name": "DELETE_PRODUCT",
                        "value": "[Product] Delete Product"
                    },
                    {
                        "name": "DELETE_PRODUCT_SUCCESS",
                        "value": "[Product] Delete Product Success"
                    },
                    {
                        "name": "DELETE_PRODUCT_FAIL",
                        "value": "[Product] Delete Product Fail"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/components/dashboard/products/store/product.action.ts"
            }
        ],
        "groupedVariables": {
            "src/stories/add-product.stories.ts": [
                {
                    "name": "addProduct",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/add-product.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/add-product.stories.ts",
                    "type": "Story<AddProductComponent>",
                    "defaultValue": "(args: AddProductComponent) => ({\n  component: AddProductComponent,\n  props: args,\n})"
                }
            ],
            "src/stories/edit-product.stories.ts": [
                {
                    "name": "addProduct",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/edit-product.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/edit-product.stories.ts",
                    "type": "Story<EditProductsComponent>",
                    "defaultValue": "(args: EditProductsComponent) => ({\n  component: EditProductsComponent,\n  props: args,\n})"
                }
            ],
            "src/stories/header.stories.ts": [
                {
                    "name": "addProductView",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/header.stories.ts",
                    "type": "Story<HeaderComponent>",
                    "defaultValue": "(args: HeaderComponent) => ({\n  component: HeaderComponent,\n  props: args,\n})"
                }
            ],
            "src/stories/card.stories.ts": [
                {
                    "name": "card",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/card.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "newItemEvent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/card.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "newItemEventId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/card.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/card.stories.ts",
                    "type": "Story<CardComponent>",
                    "defaultValue": "(args: CardComponent) => ({\n    component: CardComponent,\n    props: args,\n})"
                }
            ],
            "src/app/theme/theme.ts": [
                {
                    "name": "dark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/theme/theme.ts",
                    "type": "Theme",
                    "defaultValue": "{\n  name: 'dark',\n  properties: {\n    '--foreground-default': '#5C7D99',\n    '--foreground-secondary': '#A3B9CC',\n    '--foreground-tertiary': '#F4FAFF',\n    '--foreground-quaternary': '#E5E5E5',\n    '--foreground-light': '#FFFFFF',\n\n    '--background-default': '#797C80',\n    '--background-secondary': '#41474D',\n    '--background-tertiary': '#1c5069',\n    '--background-light': '#41474D',\n\n    '--primary-default': '#5DFDCB',\n    '--primary-dark': '#24B286',\n    '--primary-light': '#f3efef',\n\n    '--error-default': '#EF3E36',\n    '--error-dark': '#800600',\n    '--error-light': '#FFCECC',\n\n    '--background-tertiary-shadow': '0 1px 3px 0 rgba(8, 9, 10, 0.5)',\n  },\n}"
                },
                {
                    "name": "light",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/theme/theme.ts",
                    "type": "Theme",
                    "defaultValue": "{\n  name: 'light',\n  properties: {\n    '--foreground-default': '#3d4852',\n    '--foreground-secondary': '#41474D',\n    '--foreground-tertiary': '#797C80',\n    '--foreground-quaternary': '#F4FAFF',\n    '--foreground-light': '#41474D',\n\n    '--background-default': '#F4FAFF',\n    '--background-secondary': '#A3B9CC',\n    '--background-tertiary': '#aaadaf',\n    '--background-light': '#FFFFFF',\n\n    '--primary-default': '#5DFDCB',\n    '--primary-dark': '#24B286',\n    '--primary-light': '#f5fbf9',\n\n    '--error-default': '#EF3E36',\n    '--error-dark': '#800600',\n    '--error-light': '#FFCECC',\n\n    '--background-tertiary-shadow': '0 1px 3px 0 rgba(92, 125, 153, 0.5)',\n  },\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  login: serverBaseUrl + '/auth/login',\n  register: serverBaseUrl + '/auth/register',\n  getProducts: serverBaseUrl + '/products',\n  addProducts: serverBaseUrl + '/products',\n  deleteProducts: serverBaseUrl + '/products/{id}',\n  getProductsById: serverBaseUrl + '/products/{id}',\n  editProductsBy: serverBaseUrl + '/products/{id}',\n}"
                },
                {
                    "name": "serverBaseUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "string",
                    "defaultValue": "'http://localhost:8000'"
                }
            ],
            "src/app/components/dashboard/products/store/products.reducer.ts": [
                {
                    "name": "getError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/dashboard/products/store/products.reducer.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  getProductFeatureState,\n  (state: ProductState) => state.error\n)"
                },
                {
                    "name": "getProductById",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/dashboard/products/store/products.reducer.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  getProductFeatureState,\n  (state: ProductState) => state.selectedProduct\n)"
                },
                {
                    "name": "getProductFeatureState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/dashboard/products/store/products.reducer.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ProductState>('product')"
                },
                {
                    "name": "getProducts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/dashboard/products/store/products.reducer.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  getProductFeatureState,\n  (state: ProductState) => state.products\n)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/dashboard/products/store/products.reducer.ts",
                    "type": "ProductState",
                    "defaultValue": "{\n  products: [],\n  loading: false,\n  loaded: false,\n  error: ' ',\n  productId: null,\n  selectedProduct: null,\n}"
                }
            ],
            "src/app/components/store/action.ts": [
                {
                    "name": "HIDE_ADD_PRODUCT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/store/action.ts",
                    "type": "string",
                    "defaultValue": "'HIDE_ADD_PRODUCT'"
                },
                {
                    "name": "HIDE_EDIT_PRODUCT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/store/action.ts",
                    "type": "string",
                    "defaultValue": "'HIDE_EDIT_PRODUCT'"
                },
                {
                    "name": "SHOW_ADD_PRODUCT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/store/action.ts",
                    "type": "string",
                    "defaultValue": "'SHOW_ADD_PRODUCT'"
                },
                {
                    "name": "SHOW_EDIT_PRODUCT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/store/action.ts",
                    "type": "string",
                    "defaultValue": "'SHOW_EDIT_PRODUCT'"
                }
            ],
            "src/app/components/store/reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/store/reducer.ts",
                    "type": "State",
                    "defaultValue": "{\n    addProductFormView : false,\n    editProductFormView : false,\n  }"
                }
            ],
            "src/stories/dashboard.stories.ts": [
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/dashboard.stories.ts",
                    "type": "Story<DashboardComponent>",
                    "defaultValue": "(args: DashboardComponent) => ({\n  component: DashboardComponent,\n  props: args,\n})"
                }
            ],
            "src/stories/register.stories.ts": [
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/register.stories.ts",
                    "type": "Story<RegisterComponent>",
                    "defaultValue": "(args: RegisterComponent) => ({\n  component: RegisterComponent,\n  props: args,\n})"
                }
            ],
            "src/stories/login.stories.ts": [
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/login.stories.ts",
                    "type": "Story<LoginComponent>",
                    "defaultValue": "(args: LoginComponent) => ({\n  component: LoginComponent,\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/components/dashboard/products/store/products.reducer.ts": [
                {
                    "name": "productReducer",
                    "file": "src/app/components/dashboard/products/store/products.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "ProductState",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/components/store/reducer.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/components/store/reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/components/dashboard/products/store/product.action.ts": [
                {
                    "name": "ProductActionTypes",
                    "childs": [
                        {
                            "name": "LOAD_PRODUCTS",
                            "value": "[Product] Load Products"
                        },
                        {
                            "name": "LOAD_PRODUCTS_SUCCESS",
                            "value": "[Product] Load Products Success"
                        },
                        {
                            "name": "LOAD_PRODUCTS_FAIL",
                            "value": "[Product] Load Products Fail"
                        },
                        {
                            "name": "CREATE_PRODUCT",
                            "value": "[Product] Create Products"
                        },
                        {
                            "name": "CREATE_PRODUCT_SUCCESS",
                            "value": "[Product] Create Product Success"
                        },
                        {
                            "name": "CREATE_PRODUCT_FAIL",
                            "value": "[Product] Create Product Fail"
                        },
                        {
                            "name": "LOAD_PRODUCT",
                            "value": "[Product] Load Product"
                        },
                        {
                            "name": "LOAD_PRODUCT_SUCCESS",
                            "value": "[Product] Load Product Success"
                        },
                        {
                            "name": "LOAD_PRODUCT_FAIL",
                            "value": "[Product] Load Product Fail"
                        },
                        {
                            "name": "UPDATE_PRODUCT",
                            "value": "[Product] Update Product"
                        },
                        {
                            "name": "UPDATE_PRODUCT_SUCCESS",
                            "value": "[Product] Update Product Success"
                        },
                        {
                            "name": "UPDATE_PRODUCT_FAIL",
                            "value": "[Product] Update Product Fail"
                        },
                        {
                            "name": "DELETE_PRODUCT",
                            "value": "[Product] Delete Product"
                        },
                        {
                            "name": "DELETE_PRODUCT_SUCCESS",
                            "value": "[Product] Delete Product Success"
                        },
                        {
                            "name": "DELETE_PRODUCT_FAIL",
                            "value": "[Product] Delete Product Fail"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/components/dashboard/products/store/product.action.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/components/store/action.ts": [
                {
                    "name": "Actions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ShowAddProductAction | HideAddProductAction | ShowEditProductAction | HideEditProductAction",
                    "file": "src/app/components/store/action.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/components/dashboard/products/store/product.action.ts": [
                {
                    "name": "ProductAction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "LoadProducts | LoadProductsSuccess | LoadProductsFail | CreateProduct | CreateProductSuccess | CreateProductFail | LoadProduct | LoadProductSuccess | LoadProductFail | UpdateProduct | UpdateProductSuccess | UpdateProductFail | DeleteProduct | DeleteProductSuccess | DeleteProductFail",
                    "file": "src/app/components/dashboard/products/store/product.action.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "pathMatch": "full",
                        "redirectTo": "login"
                    },
                    {
                        "path": "login",
                        "component": "LoginComponent"
                    },
                    {
                        "path": "register",
                        "component": "RegisterComponent"
                    },
                    {
                        "path": "dashboard",
                        "component": "DashboardComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/products/add-product/add-product.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddProductComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/products/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/products/edit-products/edit-products.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditProductsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/products/store/app-state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/products/store/product.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreateProduct",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/products/store/product.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreateProductFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/products/store/product.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreateProductSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/products/store/product.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteProduct",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/products/store/product.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteProductFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/products/store/product.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteProductSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/products/store/product.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadProduct",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/products/store/product.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadProductFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/products/store/product.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadProducts",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/products/store/product.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadProductsFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/products/store/product.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadProductsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/products/store/product.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadProductSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/products/store/product.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateProduct",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/products/store/product.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateProductFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/products/store/product.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateProductSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/products/store/product.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductEffect",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/products/store/product.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Product",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/products/store/products.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/products/store/products.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductState",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/products/store/products.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "productReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/products/store/products.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/products/store/products.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getProductById",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/products/store/products.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getProductFeatureState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/products/store/products.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getProducts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/products/store/products.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/store/action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HideAddProductAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/store/action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HideEditProductAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/store/action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ShowAddProductAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/store/action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ShowEditProductAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/store/action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HIDE_ADD_PRODUCT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/store/action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HIDE_EDIT_PRODUCT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/store/action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SHOW_ADD_PRODUCT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/store/action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SHOW_EDIT_PRODUCT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/store/modal.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/store/reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/store/reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/lit-element/button-element.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomBtnElement",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/mocks/mocks.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppMocks",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/model/user.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/http.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HttpService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/local.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LocalService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/theme/theme.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/theme/theme.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Theme",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/theme/theme.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/theme/theme.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "light",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverBaseUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/add-product.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addProduct",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/add-product.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "card",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "newItemEvent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "newItemEventId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/dashboard.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/edit-product.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addProduct",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/edit-product.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addProductView",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/login.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/register.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}